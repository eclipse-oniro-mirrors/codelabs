"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractLocalComponentLoader_1 = require("../../core/loader/AbstractLocalComponentLoader");
const Utils_1 = require("../../core/util/Utils");
const ComponentContants_1 = require("../../core/constants/ComponentContants");
const ComponentDto_1 = require("../../core/loader/ComponentDto");
const OhComponentConstants_1 = require("../const/OhComponentConstants");
const path_1 = __importDefault(require("path"));
class OhosLocalComponentLoader extends AbstractLocalComponentLoader_1.AbstractLocalComponentLoader {
    constructor(sdkRoot, logger) {
        super(OhosLocalComponentLoader.MAX_SCAN_DEPTH, sdkRoot, logger);
        this.legacyComponents = new Array();
    }
    configMeta(jsonObject, dto) {
        const meta = jsonObject.meta;
        if (meta === null || meta === undefined) {
            return;
        }
        const metaDto = new ComponentDto_1.MetaDto();
        const metaVersion = meta.metaVersion;
        if ((0, Utils_1.isEmpty)(metaVersion)) {
            return;
        }
        if (!ComponentContants_1.META_VERSION_PATTERN.test(metaVersion) || (0, Utils_1.compareVersion)(metaVersion, OhComponentConstants_1.SUPPORT_META_VERSION) != 0) {
            this.logger.warn('Illegal component ' +
                dto.getDisplayName() +
                ':' +
                dto.getVersion() +
                ', Incorrect meta version ' +
                metaVersion);
            return;
        }
        metaDto.metaVersion = metaVersion;
    }
    isComponentInRightPlace(component, uniPackage) {
        const isInRightPlace = super.isComponentInRightPlace(component, uniPackage);
        if (isInRightPlace) {
            if (ComponentContants_1.ComponentPath.TOOLCHAINS === component.getPath() &&
                (OhComponentConstants_1.NEED_DELETE_TOOLCHAINS_VERSION.includes(component.getVersion()) || !component.hasApiVersion())) {
                this.legacyComponents.push(component);
                return false;
            }
            return true;
        }
        if (ComponentContants_1.ComponentPath.TOOLCHAINS === component.getPath() &&
            OhComponentConstants_1.MIGRATE_TOOLCHAINS_VERSION.includes(component.getVersion())) {
            component.location = path_1.default.resolve(uniPackage, '..');
            this.legacyComponents.push(component);
        }
        return false;
    }
    getLocation(component, sdkRoot) {
        if (ComponentContants_1.ComponentPath.TOOLCHAINS === component.getPath() &&
            OhComponentConstants_1.MIGRATE_TOOLCHAINS_VERSION.includes(component.getVersion())) {
            component.apiVersion = OhComponentConstants_1.MIGRATE_TOOLCHAINS_API_VERSION; // 需要迁移的toolchains的apiversion固定设置为7
        }
        return super.getLocation(component, sdkRoot);
    }
    getUniPackageName() {
        return OhosLocalComponentLoader.UNI_PACKAGE_NAME;
    }
    /**
     * 获取不兼容的sdk
     */
    getLegacyComponents() {
        return this.legacyComponents;
    }
}
exports.default = OhosLocalComponentLoader;
OhosLocalComponentLoader.MAX_SCAN_DEPTH = 5;
OhosLocalComponentLoader.UNI_PACKAGE_NAME = 'oh-uni-package.json';
