"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PathAndApiMap = exports.fsStateSync = exports.isEmpty = exports.compareVersion = void 0;
const fs = __importStar(require("fs"));
/**
 * 比较版本号的方法,版本号的格式是以[0-9]+\.的形式组成，例如1.0.0.0
 * 如果字符串不是以上面的规则组成，则直接进行字符串比较
 * @param first
 * @param second
 */
function compareVersion(first, second) {
    const version1 = first.split('.');
    const version2 = second.split('.');
    for (let i = 0; i < version1.length; i++) {
        const number1 = Number(version1[i]);
        const number2 = Number(version2[i]);
        if (Number.isNaN(number1) || Number.isNaN(number2)) {
            return first.localeCompare(second);
        }
        const result = number1 - number2;
        if (result === 0) {
            continue;
        }
        else if (result > 0) {
            return 1;
        }
        else {
            return -1;
        }
    }
    return 0;
}
exports.compareVersion = compareVersion;
/**
 * 判断值是否为null、undefined、''
 * @param value
 */
function isEmpty(value) {
    return value === null || value === undefined || value.length === 0;
}
exports.isEmpty = isEmpty;
/**
 * 当文件不存在时,fs.statSync方法会抛异常,需要catch一下
 * @param filePath
 * @private
 */
function fsStateSync(filePath) {
    try {
        return fs.statSync(filePath);
    }
    catch (e) {
        return undefined;
    }
}
exports.fsStateSync = fsStateSync;
class PathAndApiMap extends Map {
    constructor(entries) {
        super(entries);
    }
    get(key) {
        for (let key1 of this.keys()) {
            if (key.equals(key1)) {
                return super.get(key1);
            }
        }
        return undefined;
    }
}
exports.PathAndApiMap = PathAndApiMap;
