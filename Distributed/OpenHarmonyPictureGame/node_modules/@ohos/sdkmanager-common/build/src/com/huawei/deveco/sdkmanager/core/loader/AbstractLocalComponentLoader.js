"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractLocalComponentLoader = void 0;
const Utils_1 = require("../util/Utils");
const OhComponentConstants_1 = require("../../ohos/const/OhComponentConstants");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const ComponentDto_1 = require("./ComponentDto");
const SimpleLogger_1 = __importDefault(require("../log/SimpleLogger"));
const ComponentContants_1 = require("../constants/ComponentContants");
class AbstractLocalComponentLoader {
    constructor(maxScanDepth, sdkRoot, logger = new SimpleLogger_1.default()) {
        /**
         * 临时文件夹
         * @private
         */
        this.TEMP_PREFIX = ['.temp', '.delete'];
        this.maxScanDepth = maxScanDepth;
        this.sdkRoot = sdkRoot;
        this.logger = logger;
    }
    /**
     * 加载本地的sdk
     */
    load() {
        const potentialUniPackages = this.findPotentialSdks(this.sdkRoot);
        return this.parseSdks(potentialUniPackages);
    }
    /**
     * 将扫描到的文件转换为Component
     * @param potentialUniPackages
     * @protected
     */
    parseSdks(potentialUniPackages) {
        const sdkMap = new Map();
        for (const uniPackage of potentialUniPackages) {
            try {
                const buffer = fs_1.default.readFileSync(uniPackage, { encoding: 'utf-8' });
                const parse = JSON.parse(buffer);
                const component = this.convertComponent(parse);
                if (!this.isValidComponent(component)) {
                    continue;
                }
                if (!this.isComponentInRightPlace(component, uniPackage)) {
                    this.logger.debug('component ' +
                        component.getDisplayName() +
                        ':' +
                        component.getVersion() +
                        ' has been placed in the wrong place, expect ' +
                        component.getLocation() +
                        ', actual ' +
                        path_1.default.resolve(uniPackage, '..'));
                    continue;
                }
                this.addToMap(sdkMap, component);
            }
            catch (e) {
                this.logger.warn('Failed to get unipackage Info');
            }
        }
        const sdks = [];
        sdkMap.forEach(value => sdks.push(value));
        return sdks;
    }
    /**
     * 将json字符串转换为ComponentDto类
     * @param jsonObject
     * @protected
     */
    convertComponent(jsonObject) {
        const componentDto = new ComponentDto_1.ComponentDto();
        componentDto.path = jsonObject.path;
        componentDto.version = jsonObject.version;
        componentDto.releaseType = jsonObject.releaseType;
        componentDto.displayName = jsonObject.displayName;
        const apiVersion = Number(jsonObject.apiVersion);
        if (!Number.isNaN(apiVersion)) {
            componentDto.apiVersion = apiVersion;
        }
        componentDto.location = this.getLocation(componentDto, this.sdkRoot);
        this.configMeta(jsonObject, componentDto);
        return componentDto;
    }
    /**
     * 校验sdk的路径
     *
     * @param component
     * @param uniPackage
     * @protected
     */
    isComponentInRightPlace(component, uniPackage) {
        return component.getLocation() === path_1.default.resolve(uniPackage, '..');
    }
    addToMap(sdkMap, component) {
        let key;
        if (component.hasApiVersion()) {
            key = component.getPath() + '#' + component.getApiVersion();
        }
        else {
            key = component.getPath();
        }
        const oldComponent = sdkMap.get(key);
        if (oldComponent === null || oldComponent === undefined || oldComponent.compareTo(component) < 0) {
            sdkMap.set(key, component);
            return;
        }
    }
    /**
     * 使用非递归方式扫描指定sdk根路径下潜在的sdk元数据文件
     * @param root
     * @protected
     */
    findPotentialSdks(root) {
        const potentialUniPackage = [];
        if (root === null || root === undefined) {
            return potentialUniPackage;
        }
        const stats = (0, Utils_1.fsStateSync)(root);
        if (stats === undefined || !stats.isDirectory()) {
            return potentialUniPackage;
        }
        if (!this.needScan(path_1.default.basename(root))) {
            return potentialUniPackage;
        }
        const depthMap = new Map();
        const stack = [];
        stack.push(root);
        depthMap.set(root, 1);
        while (stack.length !== 0) {
            const rootPath = stack.pop();
            const depth = depthMap.get(rootPath);
            if (depth > this.maxScanDepth || !this.needScan(path_1.default.basename(rootPath))) {
                continue;
            }
            // fs.readdirSync返回的路径仅仅是文件夹的名称,不是绝对路径
            for (let childPath of fs_1.default.readdirSync(rootPath)) {
                childPath = path_1.default.resolve(rootPath, childPath);
                const uniPackageFile = path_1.default.resolve(childPath, this.getUniPackageName());
                const uniPackageFileStats = (0, Utils_1.fsStateSync)(uniPackageFile);
                if (uniPackageFileStats !== undefined && uniPackageFileStats.isFile()) {
                    potentialUniPackage.push(uniPackageFile);
                    continue;
                }
                const childPathStates = (0, Utils_1.fsStateSync)(childPath);
                if (childPathStates === undefined ||
                    !childPathStates.isDirectory() ||
                    !this.needScan(path_1.default.basename(childPath))) {
                    continue;
                }
                stack.push(childPath);
                depthMap.set(childPath, depth + 1);
            }
        }
        return potentialUniPackage;
    }
    needScan(dirName) {
        for (const tempPrefix of this.TEMP_PREFIX) {
            if (dirName.startsWith(tempPrefix)) {
                return false;
            }
        }
        return true;
    }
    /**
     * 校验Component
     * @param component
     * @protected
     */
    isValidComponent(component) {
        if ((0, Utils_1.isEmpty)(component.getPath())) {
            this.logger.warn('path is empty');
            return false;
        }
        if ((0, Utils_1.isEmpty)(component.getDisplayName())) {
            this.logger.warn('displayName is empty');
            return false;
        }
        if ((0, Utils_1.isEmpty)(component.getVersion())) {
            this.logger.warn('version is empty');
            return false;
        }
        if (!ComponentContants_1.VERSION_PATTERN.test(component.getVersion())) {
            this.logger.warn('Illegal component ' + component.getDisplayName() + ':' + component.getVersion() + ', version is incorrect');
            return false;
        }
        if (component.getApiVersion() === undefined || component.getApiVersion() < 0) {
            this.logger.warn(component.getDisplayName() + ':' + component.getVersion() + ' apiVersion should not be less than 0');
            return false;
        }
        if ((0, Utils_1.isEmpty)(component.getLocation())) {
            this.logger.warn('Illegal component ' + component.getDisplayName() + ':' + component.getVersion() + ', location' + ' is null');
            return false;
        }
        return true;
    }
    /**
     * 获取sdk的路径
     * @param component
     * @param sdkRoot
     * @protected
     */
    getLocation(component, sdkRoot) {
        const componentPath = component.getPath();
        if ((0, Utils_1.isEmpty)(componentPath)) {
            return undefined;
        }
        if (component.hasApiVersion()) {
            if (componentPath.startsWith(OhComponentConstants_1.IMAGE_PATH_PREFIX)) {
                return path_1.default.resolve(sdkRoot, this.resolveComponentPath(componentPath), component.getApiVersion() + '');
            }
            return path_1.default.resolve(sdkRoot, this.resolveComponentPath(componentPath), component.getVersion());
        }
        return path_1.default.resolve(sdkRoot, this.resolveComponentPath(componentPath));
    }
    /**
     * 将path属性中的逗号替换成文件分隔符
     * @param componentPath
     * @protected
     */
    resolveComponentPath(componentPath) {
        return componentPath.replace(',', path_1.default.sep);
    }
}
exports.AbstractLocalComponentLoader = AbstractLocalComponentLoader;
