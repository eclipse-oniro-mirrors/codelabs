"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.hvigorPath = void 0;
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
 *
 */
const process = __importStar(require("process"));
const LiftOff = require('liftoff');
const v8flags = require('v8flags');
const yargs = require('yargs');
const interpret = require('interpret');
const cliVersion = require('./package.json').version;
exports.hvigorPath = require.resolve("@ohos/hvigor-base", { paths: [process.cwd()] });
const exit_1 = require("./src/exit");
const make_title_1 = require("./src/make-title");
const cli_options_1 = require("./src/options/cli-options");
const process_utils_1 = require("./src/process-utils");
const init_env_config_props_1 = require("./src/init-env-config-props");
const hvigor_base_1 = require("@ohos/hvigor-base");
const pretty_hrtime_1 = __importDefault(require("pretty-hrtime"));
const profile_js_1 = require("./src/lifecycle/profile.js");
/**
 * name:对象名
 * processTitle: 命令行运行后的进程名，默认取name
 * moduleName: 命令行需要加载的本地的包名，默认取name
 * configName: 本地配置的文件名，默认取name+"file"
 * extensions: key代表本地配置文件的后缀，value代表需要加载的编译脚本，值可以是null 字符串，数组能
 * process.argv:node hvigor --xxx xxx --xxx xxx
 * completions:待确定
 * v8flags:v8
 * configFiles:支持多配置文件
 *
 * @type {LiftOff}
 */
const _log = hvigor_base_1.HvigorLogger.getLogger('hvigor-index.js');
const cli = new LiftOff({
    name: 'hvigor',
    processTitle: (0, make_title_1.makeTitle)('hvigor', process.argv.slice(2)),
    moduleName: exports.hvigorPath,
    configName: "hvigorFile",
    v8flags: v8flags,
    extensions: interpret.jsVariants
});
// cli options定义所有的可支持的命令行
const parser = yargs.usage("Usage", cli_options_1.cliOptions);
// 解析命令行
const opts = parser.argv;
function run() {
    cli.prepare({
        cwd: opts.cwd,
        require: opts.require,
        completion: opts.completion,
    }, function (env) {
        if (opts.help) {
            yargs.usage('Usage: hvigor [options]')
                .example('hvigor assembleApp', 'Do assembleApp task')
                .help('h')
                .alias('h', 'help')
                .epilog('copyright 2021')
                .argv;
            (0, exit_1.exit)(0);
        }
        if (opts.version) {
            _log.info('CLI version:', cliVersion);
            _log.info('Local version:', env.modulePackage.version || 'Unknown');
            (0, exit_1.exit)(0);
        }
        evaluateLogLevel();
        const LOWEST_VERSION = "v14.18.3";
        if (process.version < LOWEST_VERSION) {
            _log.warn(`node version: ${process.version}`);
            _log.warn(`node version cannot be lower than ${LOWEST_VERSION}`);
            process.exit(-1);
        }
        (0, init_env_config_props_1.initEnvConfigProps)(env, opts);
        cli.execute(env, env.nodeFlags, function () {
            return __awaiter(this, void 0, void 0, function* () {
                const taskBeginTime = process.hrtime();
                yield (0, process_utils_1.processUtils)(opts, env);
                const taskEndTime = process.hrtime(taskBeginTime);
                const realTime = (0, pretty_hrtime_1.default)(taskEndTime);
                if (0 == profile_js_1.profile.executed) {
                    _log.error(`No task found to execute in project!`);
                }
                _log.info(`BUILD SUCCESSFUL in ${realTime}`);
            });
        });
    });
}
exports.run = run;
function evaluateLogLevel() {
    if (opts.debug) {
        _log.setLevel(hvigor_base_1.levels.DEBUG);
        return;
    }
    if (opts.info) {
        _log.setLevel(hvigor_base_1.levels.INFO);
        return;
    }
    if (opts.warn) {
        _log.setLevel(hvigor_base_1.levels.WARN);
        return;
    }
    if (opts.error) {
        _log.setLevel(hvigor_base_1.levels.ERROR);
        return;
    }
    _log.setLevel(hvigor_base_1.levels.INFO);
}
//# sourceMappingURL=index.js.map