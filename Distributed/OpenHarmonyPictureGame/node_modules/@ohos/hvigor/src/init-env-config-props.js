"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initEnvConfigProps = void 0;
const hvigor_base_1 = require("@ohos/hvigor-base");
const cli_options_1 = require("./options/cli-options");
const fs = __importStar(require("fs"));
const hvigor_base_2 = require("@ohos/hvigor-base");
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const process = __importStar(require("process"));
const configFileName = hvigor_base_1.HvigorCommonConst.PROJECT_CONFIG_FILE_NAME;
const propertiesAlias = cli_options_1.cliOptions.prop.alias;
const modeAlias = cli_options_1.cliOptions.mode.alias;
/**
 * 加载liftOff获取到的configFiles中的具体一个配置文件的路径
 *
 * @param env liftoff环境变量
 * @param opts yargs解析的命令行参数
 * @return path 返回cwd的路径
 */
function initEnvConfigProps(env, opts) {
    const _log = hvigor_base_2.HvigorLogger.getLogger("initEnvConfigProps");
    // load 根项目下的build_profile
    const configFilePath = path.resolve(process.cwd(), hvigor_base_1.HvigorCommonConst.PROJECT_CONFIG_FILE);
    if (!fs.existsSync(configFilePath)) {
        _log.errorMessageExit(`Cannot find project build file '${hvigor_base_1.HvigorCommonConst.PROJECT_CONFIG_FILE}'
        ${os.EOL}\t at ${env.cwd}:1:1`);
    }
    const properties = new Map();
    if (opts.prop !== undefined) {
        [].concat(opts.prop).forEach((value) => {
            const arr = value.split('=');
            properties.set(arr[0], arr[1]);
        });
    }
    env.configProps = new Map([
        [configFileName, configFilePath],
        [propertiesAlias, properties],
        [modeAlias, opts.mode]
    ]);
    return configFilePath;
}
exports.initEnvConfigProps = initEnvConfigProps;
//# sourceMappingURL=init-env-config-props.js.map