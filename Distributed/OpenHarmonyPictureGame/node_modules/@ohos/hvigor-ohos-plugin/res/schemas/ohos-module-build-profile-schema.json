{
  "title": "openHarmony module-level build-profile configuration",
  "description": "This document describes the configuration details of the openHarmony module-level configuration file build-profile.json5.",
  "type": "object",
  "propertyNames": {
    "enum": [
      "apiType",
      "targets",
      "showInServiceCenter",
      "buildOption",
      "entryModules"
    ]
  },
  "properties": {
    "targets": {
      "description": "Defines different target schemes customized for the module. Multiple target schemes can be included. By default, a default target exists.",
      "type": "array",
      "items": {
        "type": "object",
        "propertyNames": {
          "enum": [
            "name"
          ]
        },
        "properties": {
          "name": {
            "description": "Define the target name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "minItems": 1
    },
    "showInServiceCenter": {
      "description": "Indicates whether the module is displayed in the service center of the openHarmony system.",
      "type": "boolean"
    },
    "buildOption": {
      "description": "Configure the related configurations used by the module during the build process.",
      "type": "object",
      "propertyNames": {
        "enum": [
          "resOptions",
          "arkEnable",
          "externalNativeOptions",
          "sourceOption"
        ]
      },
      "properties": {
        "resOptions": {
          "description": "Configurations related to resource compilation",
          "type": "object"
        },
        "arkEnable": {
          "description": "Indicates whether to enable Ark compilation.",
          "type": "boolean"
        },
        "externalNativeOptions": {
          "description": "Configurations related to native compilation.",
          "type": "object",
          "propertyNames": {
            "enum": [
              "path",
              "abiFilters",
              "arguments",
              "cppFlags"
            ]
          },
          "properties": {
            "path": {
              "description": "Path of the CMakeLists.txt file (relative to the configuration file), for example, ./src/main/cpp/CMakeLists.txt.",
              "type": "string"
            },
            "abiFilters": {
              "description": "Defines the CPU architecture type of the system where the CPP application runs. Multiple CPU architecture types can be included, for example, Arm64-v8a.",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "arm64-v8a",
                  "armeabi-v7a"
                ]
              },
              "minItems": 1
            },
            "arguments": {
              "description": "Specifies cmake compilation parameters, for example, -v -DOHOS_STL=c++_static",
              "type": "string"
            },
            "cppFlags": {
              "description": "Specifies the settings related to CMAKE_CXX_FLAGS.",
              "type": "string"
            }
          }
        },
        "sourceOption": {
          "description": "Different tags are used to classify source codes so that different source codes can be processed differently during the build process.",
          "type": "object",
          "propertyNames": {
            "enum": [
              "workers"
            ]
          },
          "properties": {
            "workers": {
              "description":"Specifies the JS/TS source code that uses node.js worker, The source code is processed separately during the build process.",
              "type": "array",
              "items":{
                "type": "string"
              }
            }
          }
        }
      }
    },
    "entryModules": {
      "description": "If the module is a feature module, this field needs to be used to specify the associated entry module.",
      "type": "array",
      "items": {
        "description": "Associated entry module name",
        "type": "string"
      },
      "minItems": 1
    },
    "apiType": {
      "type": "string",
      "description": "Ability API model type. The faMode and updated stageMode models can be configured.",
      "enum": [
        "faMode",
        "stageMode"
      ]
    }
  }
}
