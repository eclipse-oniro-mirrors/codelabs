"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 *
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageApp = void 0;
const packing_tool_options_js_1 = require("../builder/inner-java-command-builder/packing-tool-options.js");
const path_1 = __importDefault(require("path"));
const ohos_app_task_js_1 = require("./task/ohos-app-task.js");
const process_utils_js_1 = require("../utils/process-utils.js");
const build_directory_const_js_1 = require("../const/build-directory-const.js");
const fs_1 = __importDefault(require("fs"));
const file_util_js_1 = require("../utils/file-util.js");
const ohos_logger_js_1 = require("../utils/log/ohos-logger.js");
const project_file_reader_js_1 = require("../utils/project-file-reader.js");
/**
 * 调用打包工具生成.app
 *
 * @since 2022/1/10
 */
class PackageApp extends ohos_app_task_js_1.OhosAppTask {
    constructor(taskService) {
        super(taskService, "PackageApp");
        this._log = ohos_logger_js_1.OhosLogger.getLogger(PackageApp.name);
        this.executePackageApp = () => {
            const packageOptions = new packing_tool_options_js_1.PackingToolOptions();
            const sdkInfo = this.service.getSdkInfo();
            const pathInfo = this.service.getPathInfo();
            packageOptions.addCalledJarFile(sdkInfo.getPackageTool());
            const allHapPath = [];
            this.service.getProductDataMap().forEach((value) => {
                for (const moduleTargetData of value) {
                    const outputHapFileName = moduleTargetData.getModuleTargetOutputFileName();
                    const hapPath = path_1.default.resolve(moduleTargetData.getPathInfo().getModuleBuildOutputPath(), outputHapFileName);
                    const destDir = path_1.default.resolve(moduleTargetData.getPathInfo().getModuleBuildOutputPath(), "app");
                    file_util_js_1.FileUtil.checkDirWithoutDelete(destDir);
                    const destFile = path_1.default.resolve(destDir, outputHapFileName.replace("-unsigned", ""));
                    file_util_js_1.FileUtil.checkFile(destFile);
                    fs_1.default.writeFileSync(destFile, fs_1.default.readFileSync(hapPath));
                    allHapPath.push(destFile);
                }
            });
            // 修改packInfo里面的name字段
            const packInfoPath = path_1.default.resolve(pathInfo.getProjectOutputPath(), build_directory_const_js_1.BuildArtifactConst.PACK_INFO);
            const packInfoObj = project_file_reader_js_1.ProjectFileReader.getJson5Obj(packInfoPath);
            const packages = packInfoObj.packages;
            for (let i = 0; i < (packages === null || packages === void 0 ? void 0 : packages.length); i++) {
                packages[i].name = packages[i].name.replace("-unsigned", "");
            }
            file_util_js_1.FileUtil.checkDirWithoutDelete(packInfoPath);
            fs_1.default.writeFileSync(packInfoPath, JSON.stringify(packInfoObj));
            packageOptions.addMode("app")
                .addPackInfoPath(packInfoPath)
                .addHapPath(allHapPath.join(","))
                .force(true);
            const appOutputFileName = this.service.getAppOutputFileName();
            packageOptions.addOutPath(path_1.default.resolve(pathInfo.getProjectOutputPath(), appOutputFileName));
            this._log._printDebugCommand("PackageApp", packageOptions.commandList);
            return packageOptions.commandList;
        };
    }
    doTaskAction() {
        new process_utils_js_1.ProcessUtils().executeSync(this.executePackageApp());
    }
}
exports.PackageApp = PackageApp;
//# sourceMappingURL=package-app.js.map