"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonSignCommandBuilder = void 0;
const fs_1 = __importDefault(require("fs"));
const ohos_logger_js_1 = require("../../../utils/log/ohos-logger.js");
const decipher_util_js_1 = require("../../../utils/decipher-util.js");
const path_1 = __importDefault(require("path"));
/**
 * 签名的公共处理参数的Builder类
 *
 * @since 2022/1/21
 */
class CommonSignCommandBuilder {
    constructor(projectModel, signingConfig, sdkInfo, signModel, signingOptions) {
        this._log = ohos_logger_js_1.OhosLogger.getLogger(CommonSignCommandBuilder.name);
        this._projectModel = projectModel;
        this._signingConfig = signingConfig;
        this._sdkInfo = sdkInfo;
        this._signModel = signModel;
        this._signingOptions = signingOptions;
    }
    /**
     * 通过初始化signOptions的配置,并添加公共的签名工具路径
     *
     * @return signCommand
     */
    getSignCommand() {
        this.initCommandParams();
        const signTool = this.getSignTool();
        this._signingOptions.addCalledJarFile(signTool);
        return this._signingOptions.build();
    }
    getWorkDir() {
        return this._sdkInfo.getSignDir();
    }
    getKeyStorePwd() {
        const rootDir = path_1.default.resolve(this._signingConfig.material.storeFile, '..');
        return decipher_util_js_1.DecipherUtil.decryptPwd(rootDir, this._signingConfig.material.storePassword);
    }
    getKeyPwd() {
        const rootDir = path_1.default.resolve(this._signingConfig.material.storeFile, '..');
        return decipher_util_js_1.DecipherUtil.decryptPwd(rootDir, this._signingConfig.material.keyPassword);
    }
    /**
     * 将相对路径转化为绝对路径, 并校验签名材料是否存在
     *
     * @param {ProjectBuildProfile.MaterialBuildOpt | undefined} material
     * @protected
     */
    checkValidMaterial(material) {
        const solution = "Please check signingConfigs in root project build-profile.json5";
        if (material === undefined) {
            this._log._buildError("The material is not configured in signingConfigs.")
                ._solution(solution)
                ._file(this._projectModel.getProfilePath())
                ._printErrorAndExit(this._projectModel.getName());
        }
        this.validateMaterial(material.storeFile, solution, 'storeFile');
        this.validateMaterial(material.profile, solution, 'profile');
        this.validateMaterial(material.certpath, solution, 'certPath');
        material.storeFile = this.normalizePath(material.storeFile);
        material.profile = this.normalizePath(material.profile);
        material.certpath = this.normalizePath(material.certpath);
    }
    /**
     * 转化签名材料的相对路径为绝对路径.
     * 1 若是绝对路径, 直接返回
     * 2 若是相对路径, 则加上build-profile.json5的目录拼成绝对路径
     *
     * @param {string} materialFilePath 配置签名材料的路径
     * @returns {string} 签名材料的绝对路径
     * @private
     */
    normalizePath(materialFilePath) {
        if (path_1.default.isAbsolute(materialFilePath)) {
            return materialFilePath;
        }
        return path_1.default.resolve(this._projectModel.getProjectDir(), materialFilePath);
    }
    validateMaterial(materialFilePath, solution, materialFileName) {
        if (materialFilePath !== undefined && fs_1.default.existsSync(this.normalizePath(materialFilePath))) {
            return;
        }
        this._log._buildError(`Check if '${materialFileName}' is configured correctly, it can't be null or empty.` +
            `file must exist at '${materialFilePath}'`)
            ._solution(solution)
            ._file(this._projectModel.getProfilePath())
            ._printErrorAndExit(this._projectModel.getName());
    }
}
exports.CommonSignCommandBuilder = CommonSignCommandBuilder;
//# sourceMappingURL=common-sign-command-builder.js.map