"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HapV2SignCommandBuild = void 0;
const common_sign_command_builder_1 = require("./common-sign-command-builder");
const sdk_const_1 = require("../../../const/sdk-const");
const path_1 = __importDefault(require("path"));
/**
 * sdk 老签名工具hapsigntoolv2的命令行生成器
 *
 * @since 2022/03/01
 */
class HapV2SignCommandBuild extends common_sign_command_builder_1.CommonSignCommandBuilder {
    constructor(projectModel, signingConfig, sdkInfo, signModel, signingOptions) {
        super(projectModel, signingConfig, sdkInfo, signModel, signingOptions);
    }
    getSignTool() {
        return path_1.default.resolve(this._sdkInfo.getSignDir(), sdk_const_1.ToolChainsConst.SIGN_TOOL);
    }
    /**
     * 获取build-profile中的签名配置,加载到signOptions中
     */
    initCommandParams() {
        const material = this._signingConfig.material;
        this.checkValidMaterial(material);
        this._signingOptions.sign()
            .addMode(HapV2SignCommandBuild.SIGN_MODE)
            .addKeyStore(material.storeFile)
            .addKeyStorePwd(this.getKeyStorePwd())
            .addPrivateKey(material.keyAlias)
            .addKeyAliasPwd(material.keyPassword)
            .addSignAlg(material.signAlg)
            .addProfile(material.profile)
            .addCertPath(material.certpath)
            .addInputFile(this._signModel.getInputFilePath())
            .addOutputFile(this._signModel.getOutPutFilePath());
    }
}
exports.HapV2SignCommandBuild = HapV2SignCommandBuild;
HapV2SignCommandBuild.SIGN_MODE = "localjks";
//# sourceMappingURL=hapv2-sign-command-build.js.map