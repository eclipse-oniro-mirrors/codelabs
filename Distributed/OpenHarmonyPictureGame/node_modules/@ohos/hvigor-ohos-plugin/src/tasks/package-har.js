"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageHar = void 0;
const node_util_js_1 = require("../utils/node-util.js");
const ohos_hap_task_js_1 = require("./task/ohos-hap-task.js");
const path_1 = __importDefault(require("path"));
const fs = __importStar(require("fs-extra"));
const process_utils_js_1 = require("../utils/process-utils.js");
const build_directory_const_js_1 = require("../const/build-directory-const.js");
const common_const_js_1 = require("../const/common-const.js");
const npm_command_builder_js_1 = require("../builder/npm-command-builder.js");
/**
 * 打包Har包
 *
 * @param cb
 */
class PackageHar extends ohos_hap_task_js_1.OhosHapTask {
    constructor(taskService) {
        super(taskService, "PackageHar");
        this._moduleDir = taskService.getModuleModel().getProjectDir();
        const profileOption = taskService.getModuleModel().getProfileOpt();
        this._nativeOption = profileOption.buildOption.externalNativeOptions;
        this._sdkInfo = this.service.getSdkInfo();
    }
    doTaskAction(targetData, target) {
        var _a;
        const pathInfo = targetData.getPathInfo();
        const moduleDir = (_a = this.service.getModuleModel()) === null || _a === void 0 ? void 0 : _a.getProjectDir();
        const processedLibs = pathInfo.getIntermediatesProcessLibs();
        const resourceDir = pathInfo.getIntermediatesRes();
        // 复制模块中所有内容到build文件夹中
        fs.emptyDirSync(pathInfo.getModuleBuildOutputPath());
        fs.emptyDirSync(this.getTaskTempDir(targetData));
        // c++编译产物
        if (fs.pathExistsSync(processedLibs)) {
            fs.copySync(pathInfo.getIntermediatesProcessLibs(), path_1.default.resolve(this.getTaskTempDir(targetData), build_directory_const_js_1.BuildDirConst.LIBS));
        }
        // ResourceTable.txt
        if (fs.pathExistsSync(resourceDir)) {
            fs.copySync(path_1.default.resolve(resourceDir, build_directory_const_js_1.BuildArtifactConst.RESOURCE_TABLE_TXT), path_1.default.resolve(this.getTaskTempDir(targetData), build_directory_const_js_1.BuildArtifactConst.RESOURCE_TABLE_TXT));
        }
        // 打包过滤目录
        let filter = [build_directory_const_js_1.BuildDirConst.LIBS, build_directory_const_js_1.BuildDirConst.BUILD_ROOT, common_const_js_1.CommonNodeConst.NODE_MODULES, ".cxx", ".preview"];
        if (!filter.includes(pathInfo.getBuildRoot())) {
            filter.push(pathInfo.getBuildRoot());
        }
        filter = filter.map(baseName => {
            return path_1.default.resolve(moduleDir, baseName);
        });
        fs.readdirSync(moduleDir).forEach(srcPath => {
            const src = path_1.default.resolve(moduleDir, srcPath);
            if (filter.includes(src)) {
                return;
            }
            fs.copySync(path_1.default.resolve(moduleDir, srcPath), path_1.default.resolve(this.getTaskTempDir(targetData), srcPath), {
                filter: (src, dest) => {
                    return !(this._nativeOption && src === this.getCmakeListDir());
                }
            });
        });
        // 拷贝cpp/types
        if (this._nativeOption) {
            const cppTypes = path_1.default.resolve(this.getCmakeListDir(), "types");
            fs.copySync(cppTypes, path_1.default.resolve(this.getTaskTempDir(targetData), "src", "main", "cpp", "types"));
        }
        // 将合并后的module.json5/config.json复制到对应位置
        const harProfile = pathInfo.getIntermediatesMergeProfileDir();
        fs.copySync(harProfile, path_1.default.resolve(this.getTaskTempDir(targetData), "src", "main"));
        const harModuleJson = path_1.default.resolve(this.getTaskTempDir(targetData), "src", "main", common_const_js_1.CommonConst.MODULE_JSON5);
        if (fs.pathExistsSync(harModuleJson)) {
            fs.removeSync(harModuleJson);
        }
        // npm pack
        const npmPath = path_1.default.resolve((0, node_util_js_1.findValidNodeExePath)(this.service.getSdkInfo().getNodeJsDir()), "..");
        const npmBuilder = new npm_command_builder_js_1.NpmCommandBuilder(npmPath);
        npmBuilder.addAllParams(["pack"]);
        new process_utils_js_1.ProcessUtils(this.moduleName, this.taskName).executeSync(npmBuilder.build(), {
            cwd: this.getTaskTempDir(targetData)
        }, true);
        fs.copySync(this.getTaskTempDir(targetData), pathInfo.getModuleBuildOutputPath(), {
            filter: (src, dest) => {
                return (!fs.lstatSync(src).isDirectory() && src.endsWith(".tgz"))
                    || src === this.getTaskTempDir(targetData);
            }
        });
    }
    getCmakeListDir() {
        return path_1.default.resolve(this._moduleDir, this._nativeOption.path, '..');
    }
}
exports.PackageHar = PackageHar;
//# sourceMappingURL=package-har.js.map