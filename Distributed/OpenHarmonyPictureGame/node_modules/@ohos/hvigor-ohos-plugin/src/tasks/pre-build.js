"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 *
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreBuild = void 0;
const ohos_hap_task_js_1 = require("./task/ohos-hap-task.js");
const validate_util_js_1 = require("../utils/validate-util.js");
const ohos_logger_js_1 = require("../utils/log/ohos-logger.js");
const hap_extra_info_js_1 = require("../project/data/hap-extra-info.js");
const common_const_js_1 = require("../const/common-const.js");
const path_1 = __importDefault(require("path"));
const project_file_reader_1 = require("../utils/project-file-reader");
/**
 * preBuild Task
 *
 * @since 2022/1/10
 */
class PreBuild extends ohos_hap_task_js_1.OhosHapTask {
    constructor(taskService) {
        super(taskService, "PreBuild");
        this._log = ohos_logger_js_1.OhosLogger.getLogger(PreBuild.name);
    }
    doTaskAction(targetData, target) {
        var _a;
        this.versionCheck();
        if (this.service.getHapExtraInfo().isStageMode()) {
            // app.json5 module.json5文件校验
            this.appJson5Validate(target);
            this.moduleJson5Validate(target);
            this.validateHMServiceBundleName(target);
            if ((_a = this.service.getModuleModel()) === null || _a === void 0 ? void 0 : _a.isHapModule()) {
                this.validateMainElementAndAbilities(target);
            }
        }
        else {
            // 老模型，校验config.json
            this.configJsonValidate(target);
        }
    }
    appJson5Validate(target) {
        const appJson5SchemaPath = this.service.getSdkInfo().getAppSchema();
        const appJson5Schema = require(appJson5SchemaPath);
        const projectModel = this.service.getProjectModel();
        const appJsonPath = projectModel.getAppRes().getJsonPath();
        validate_util_js_1.ValidateUtil.doSchemaCheck(projectModel.getName(), appJsonPath, appJson5Schema);
    }
    moduleJson5Validate(target) {
        const moduleJson5SchemaPath = this.service.getSdkInfo().getModuleSchema();
        const moduleJson5Schema = require(moduleJson5SchemaPath);
        const instance = this.service.getModuleModel();
        const moduleName = instance.getName();
        const moduleTargetRes = instance.getSourceSetByTargetName(target)
            .getModuleTargetRes();
        const moduleJson5Path = moduleTargetRes.getJsonPath();
        validate_util_js_1.ValidateUtil.doSchemaCheck(moduleName, moduleJson5Path, moduleJson5Schema);
        if (target !== common_const_js_1.DefaultTargetConst.OHOS_TEST_TARGET) {
            this.validateModuleName(moduleName, moduleTargetRes.getModuleJsonOpt().module.name, common_const_js_1.CommonConst.MODULE_JSON5);
        }
    }
    configJsonValidate(target) {
        const configJsonSchemaPath = this.service.getSdkInfo().getRichSchema();
        const configJsonSchema = require(configJsonSchemaPath);
        const instance = this.service.getModuleModel();
        const moduleName = instance.getName();
        const legacyModuleTargetRes = instance.getSourceSetByTargetName(target).getLegacyModuleTargetRes();
        const configJsonPath = legacyModuleTargetRes.getJsonPath();
        validate_util_js_1.ValidateUtil.doSchemaCheck(moduleName, configJsonPath, configJsonSchema);
        if (target !== common_const_js_1.DefaultTargetConst.OHOS_TEST_TARGET) {
            this.validateModuleName(moduleName, legacyModuleTargetRes.getConfigJsonOpt().module.distro.moduleName, common_const_js_1.CommonConst.CONFIG_JSON);
        }
    }
    versionCheck() {
        const projectModel = this.service.getProjectModel();
        const apiType = this.moduleModel.getProfileOpt().apiType;
        const compileApiVersion = projectModel.getCompileApiVersion();
        if (apiType === hap_extra_info_js_1.ApiType.STAGE && 9 > compileApiVersion) {
            this._log._buildError(`API${compileApiVersion} do not support StageMode.`)
                ._file(projectModel.getProfilePath())
                ._printErrorAndExit();
        }
    }
    validateModuleName(profileModuleName, moduleName, sourceConfigName) {
        if (profileModuleName !== moduleName) {
            const buildProfilePath = this.service.getProjectModel().getProfilePath();
            this._log._buildError(`The name of ${profileModuleName} module in build-profile.json5 ` +
                `must be same as moduleName in ${sourceConfigName}`)
                ._solution(`Change '${profileModuleName}' to '${moduleName}'`)
                ._file(buildProfilePath)
                ._printErrorAndExit(moduleName);
        }
    }
    validateHMServiceBundleName(target) {
        var _a;
        const sourceRoot = (_a = this.service.getModuleModel()) === null || _a === void 0 ? void 0 : _a.getSourceRootByTargetName(target);
        const moduleJsonPath = path_1.default.resolve(sourceRoot, common_const_js_1.CommonConst.MODULE_JSON5);
        const moduleJson = project_file_reader_1.ProjectFileReader.getJson5Obj(moduleJsonPath);
        const regExp = /\.hmservice$/;
        if (moduleJson.module.installationFree) {
            const projectModel = this.service.getProjectModel();
            const appResOpt = projectModel.getAppRes().getAppResOpt();
            const appJsonPath = projectModel.getAppRes().getJsonPath();
            if (!regExp.test(appResOpt.app.bundleName)) {
                const cause = "The value of 'bundleName' in app.json5 is incorrect.";
                const solution = "If the current OpenHarmony project is an atomized service, " +
                    "the 'bundleName' field in the app.json5 file must end with '.hmservice'.";
                this._log._buildError(cause)
                    ._solution(solution)
                    ._file(appJsonPath)
                    ._printErrorAndExit();
            }
        }
    }
    validateMainElementAndAbilities(target) {
        var _a;
        const sourceRoot = (_a = this.service.getModuleModel()) === null || _a === void 0 ? void 0 : _a.getSourceRootByTargetName(target);
        const moduleJsonPath = path_1.default.resolve(sourceRoot, common_const_js_1.CommonConst.MODULE_JSON5);
        const moduleJson = project_file_reader_1.ProjectFileReader.getJson5Obj(moduleJsonPath);
        const mainElement = moduleJson.module.mainElement;
        if (moduleJson.module.installationFree && mainElement === undefined) {
            const cause = "The 'mainElement' field in the module.json5 file does not exist.";
            const solution = "If the current OpenHarmony project is an atomized service, " +
                "the 'mainElement' tag must exist.";
            this._log._buildError(cause)
                ._solution(solution)
                ._file(moduleJsonPath)
                ._printErrorAndExit();
        }
        const abilityList = moduleJson.module.abilities;
        abilityList === null || abilityList === void 0 ? void 0 : abilityList.forEach(ability => {
            if (mainElement !== undefined && ability.name === mainElement) {
                if (ability.label === undefined || ability.icon === undefined) {
                    const cause = "When the 'mainElement' field is the same as the 'name' field, " +
                        "the 'icon' and 'label' in the 'ability' field cannot be missing.";
                    const solution = "Configuring the 'icon' and 'label' labels in the 'ability' field correctly";
                    this._log._buildError(cause)
                        ._solution(solution)
                        ._file(moduleJsonPath)
                        ._printErrorAndExit();
                }
            }
        });
    }
}
exports.PreBuild = PreBuild;
//# sourceMappingURL=pre-build.js.map