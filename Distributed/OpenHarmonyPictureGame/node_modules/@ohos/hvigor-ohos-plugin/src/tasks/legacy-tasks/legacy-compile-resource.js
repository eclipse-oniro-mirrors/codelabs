"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 *
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegacyCompileResource = void 0;
const restool_command_builder_js_1 = require("../../builder/restool-command-builder.js");
const process_utils_js_1 = require("../../utils/process-utils.js");
const file_util_js_1 = require("../../utils/file-util.js");
const ohos_hap_task_js_1 = require("../task/ohos-hap-task.js");
const build_directory_const_js_1 = require("../../const/build-directory-const.js");
const path_1 = __importDefault(require("path"));
const ohos_logger_js_1 = require("../../utils/log/ohos-logger.js");
const project_file_reader_js_1 = require("../../utils/project-file-reader.js");
/**
 * 老模型的资源编译任务
 *
 * @since 2022/1/20
 */
class LegacyCompileResource extends ohos_hap_task_js_1.OhosHapTask {
    constructor(taskService) {
        super(taskService, 'CompileResource');
        this._log = ohos_logger_js_1.OhosLogger.getLogger(LegacyCompileResource.name);
    }
    doTaskAction(targetData, target) {
        const sdkInfo = this.service.getSdkInfo();
        const moduleModel = this.service.getModuleModel();
        const pathInfo = targetData.getPathInfo();
        // 处理后最终传给restool的config.json
        const processJson = pathInfo.getIntermediatesProcessLegacyProfile();
        const configInfo = project_file_reader_js_1.ProjectFileReader.getJson5Obj(processJson);
        const outputDir = pathInfo.getIntermediatesRes();
        file_util_js_1.FileUtil.checkDirWithoutDelete(outputDir);
        const restoolBuilder = new restool_command_builder_js_1.RestoolCommandBuilder(sdkInfo.getRestool());
        // 加入har依赖中的resources
        const harList = project_file_reader_js_1.ProjectFileReader.getJson5Obj(path_1.default.resolve(targetData.getPathInfo().getIntermediatesMergeRes(), build_directory_const_js_1.BuildArtifactConst.MERGE_NPM_FILE_JSON)).dependencies;
        harList.forEach(harPath => {
            restoolBuilder.addInputDir(path_1.default.resolve(harPath, "src", "main"));
        });
        restoolBuilder.addInputDir(moduleModel.getSourceSetByTargetName(target).getSourceSetRoot()) // 公共模块的资源
            .addJsonFile(processJson) // config.json
            .addModulePackName(configInfo.app.bundleName) // bundleName
            .addOutputDir(outputDir) // 输出目录
            .forceDelete()
            .addModules([...new Set([
                this.moduleModel.getName(),
                this.moduleModel.getSourceSetByTargetName(target)
                    .getLegacyModuleTargetRes().getConfigJsonOpt().module.distro.moduleName
            ])].join(','));
        const isShellMode = false;
        if (isShellMode) {
            // 生成的ResourceTable.txt路径
            restoolBuilder
                .addResTable(path_1.default.resolve(this.getTaskTempDir(targetData), build_directory_const_js_1.BuildArtifactConst.RESOURCE_TABLE_JAVA))
                .addOutputBak(this.getTaskTempDir(targetData));
        }
        else {
            restoolBuilder.addResTable(path_1.default.resolve(outputDir, build_directory_const_js_1.BuildArtifactConst.RESOURCE_TABLE_TXT));
        }
        const commands = restoolBuilder.build();
        this._log._printDebugCommand("restool", commands);
        new process_utils_js_1.ProcessUtils(this.moduleName, this.taskName).executeSync(commands);
    }
}
exports.LegacyCompileResource = LegacyCompileResource;
//# sourceMappingURL=legacy-compile-resource.js.map