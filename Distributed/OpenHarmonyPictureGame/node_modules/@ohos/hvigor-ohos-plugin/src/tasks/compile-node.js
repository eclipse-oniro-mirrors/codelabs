"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompileNode = void 0;
const code_type_enum_js_1 = require("../enum/code-type-enum.js");
const path_1 = __importDefault(require("path"));
const fse = __importStar(require("fs-extra"));
const ohos_hap_task_js_1 = require("./task/ohos-hap-task.js");
const node_command_builder_js_1 = require("../builder/node-command-builder.js");
const common_const_js_1 = require("../const/common-const.js");
const process_utils_js_1 = require("../utils/process-utils.js");
const build_directory_const_js_1 = require("../const/build-directory-const.js");
const hvigor_base_1 = require("@ohos/hvigor-base");
const node_util_js_1 = require("../utils/node-util.js");
const ohos_logger_js_1 = require("../utils/log/ohos-logger.js");
/**
 * 调用loader编译新模型的js/ets源码
 *
 * @since 2022/1/10
 */
class CompileNode extends ohos_hap_task_js_1.OhosHapTask {
    constructor(taskService, codeType) {
        super(taskService, `Compile${codeType.toUpperCase()}`);
        this._log = ohos_logger_js_1.OhosLogger.getLogger(CompileNode.name);
        this.commonOption = {
            'path': (0, node_util_js_1.findValidNodeDir)(this.sdkInfo.getNodeJsDir()),
            'watchMode': 'false',
        };
        this.codeType = codeType;
    }
    doTaskAction(targetData, target) {
        this.doRealLoaderCompile((0, node_util_js_1.findValidNodeDir)(this.sdkInfo.getNodeJsDir()), this.codeType === code_type_enum_js_1.CodeType.ETS ? this.sdkInfo.getEtsLoader() : this.sdkInfo.getJsLoader(), this.generateLoaderEnv(targetData));
        this.moveReleaseMap(targetData);
    }
    taskShouldDo(targetData) {
        this.codeModel = this.moduleModel
            .getSourceSetByTargetName(targetData.getTargetName())
            .getCodeMap().get(this.codeType);
        return this.codeModel !== undefined;
    }
    /**
     * 移动_releaseMap到临时目录
     *
     * @param {ModuleTargetData} targetData
     * @param {string} abilityPath 老模型的_releaseMap需要会拷贝一级目录到abilityPath
     * @protected
     */
    moveReleaseMap(targetData, abilityPath = '.') {
        const reMapDir = path_1.default.resolve(targetData.getPathInfo().getIntermediatesAssetsPath(), this.codeType, abilityPath, build_directory_const_js_1.BuildArtifactConst.RELEASE_MAP);
        if (!fse.existsSync(reMapDir)) {
            return;
        }
        const tempDir = path_1.default.resolve(this.getTaskTempDir(targetData), abilityPath, build_directory_const_js_1.BuildArtifactConst.RELEASE_MAP);
        if (fse.existsSync(tempDir)) {
            fse.removeSync(tempDir);
        }
        fse.moveSync(reMapDir, tempDir);
        this._log.debug(`move ${reMapDir} to ${tempDir}`);
    }
    doRealLoaderCompile(nodeJsDir, workDir, cmdEnv) {
        const debuggable = hvigor_base_1.vigorConfigInst.getExtraConfig().get(common_const_js_1.CommonConst.DEBUGGABLE);
        const nodeCommandBuilder = new node_command_builder_js_1.NodeCommandBuilder(nodeJsDir, true)
            .addWebpackPath('./node_modules/webpack/bin/webpack.js')
            .addWebpackConfig(this.codeType === code_type_enum_js_1.CodeType.ETS ? common_const_js_1.CommonConst.ETS_WEBPACK_FILE : common_const_js_1.CommonConst.ACE_RICH_WEBPACK_FILE)
            .addBuildMode(debuggable === undefined || debuggable !== "false");
        if (this.moduleModel.isArkModule()) {
            nodeCommandBuilder.addCompilerType('ark');
        }
        this._log._printDebugCommand("NodeEnv", cmdEnv);
        this._log._printDebugCommand(`${this.codeType.toUpperCase()}-loader`, nodeCommandBuilder.build());
        const options = {
            cwd: workDir,
            env: cmdEnv
        };
        new process_utils_js_1.ProcessUtils(this.moduleName, this.taskName).executeSync(nodeCommandBuilder.build(), options);
    }
    generateLoaderEnv(targetData) {
        const pathInfo = targetData.getPathInfo();
        const cmdEnv = Object.assign(Object.assign({}, this.commonOption), { 'appResource': path_1.default.resolve(pathInfo.getIntermediatesRes(), build_directory_const_js_1.BuildArtifactConst.RESOURCE_TABLE_TXT), 'aceModuleBuild': path_1.default.resolve(pathInfo.getIntermediatesAssetsPath(), this.codeType), 'aceModuleRoot': this.codeModel.getSrcPath(), 'cachePath': this.getTaskTempDir(targetData), 'aceProfilePath': pathInfo.getIntermediatesResProfilePath(), 'aceModuleJsonPath': path_1.default.resolve(pathInfo.getIntermediatesRes(), common_const_js_1.CommonConst.MODULE_JSON), 'aceSuperVisualPath': path_1.default.resolve(this.moduleModel.getSourceRootByTargetName(targetData.getTargetName()), 'supervisual') });
        const aceLoaderJson = path_1.default.resolve(pathInfo.getIntermediatesLoaderPath(), build_directory_const_js_1.BuildArtifactConst.LOADER_JSON);
        return fse.existsSync(aceLoaderJson) ? Object.assign(Object.assign({}, cmdEnv), { aceBuildJson: aceLoaderJson }) : cmdEnv;
    }
}
exports.CompileNode = CompileNode;
//# sourceMappingURL=compile-node.js.map