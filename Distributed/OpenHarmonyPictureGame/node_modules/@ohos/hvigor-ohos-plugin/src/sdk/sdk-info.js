"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkInfo = void 0;
const sdkmanager_common_1 = require("@ohos/sdkmanager-common");
const sdk_ets_component_js_1 = require("./impl/sdk-ets-component.js");
const sdk_js_component_js_1 = require("./impl/sdk-js-component.js");
const sdk_toolchains_component_js_1 = require("./impl/sdk-toolchains-component.js");
const sdk_native_component_js_1 = require("./impl/sdk-native-component.js");
const path_1 = __importDefault(require("path"));
const property_get_js_1 = require("./lib/property-get.js");
const ohos_logger_1 = require("../utils/log/ohos-logger");
const pretty_hrtime_1 = __importDefault(require("pretty-hrtime"));
/**
 * sdk信息实例 main class
 *
 * @since 2021-12-16
 */
class SdkInfo {
    /**
     * 传入编译版本和需要的实例 ['Js', 'Ets', 'Toolchains']
     *
     * @param compileVersion
     * @param requireComponents
     */
    constructor(compileVersion, requireComponents) {
        this._log = ohos_logger_1.OhosLogger.getLogger(SdkInfo.name);
        this._log.debug("Sdk init...");
        const taskBeginTime = process.hrtime();
        this._baseDir = property_get_js_1.Property.getInstance().getSdkDir();
        this._sdkVersion = compileVersion;
        this._components = requireComponents;
        const sdkInfoConfig = sdkmanager_common_1.SdkInfoConfig.create(this._baseDir);
        const ohSdkInfoHandler = new sdkmanager_common_1.OhSdkInfoHandler(sdkInfoConfig);
        try {
            this._localSdkComponents = ohSdkInfoHandler.getLocalSdks();
            this._log.debug(`Find sdk tools: ${Array.from(this._localSdkComponents.values())}`);
        }
        catch (e) {
            if (e instanceof sdkmanager_common_1.SdkException) {
                const sdkException = e;
                const errTip = sdkException.getErrorTip();
                this._log._buildError(errTip.reason)
                    ._solution(`${errTip.fixSuggestion}.Open SDK Manager`)
                    ._file(this._baseDir)
                    ._printErrorAndExit();
            }
        }
        this._components.forEach(this.initComponents, this);
        const taskEndTime = process.hrtime(taskBeginTime);
        const realTime = (0, pretty_hrtime_1.default)(taskEndTime);
        this._log.debug(`Sdk handle finished...${realTime}`);
    }
    getBaseDir() {
        return path_1.default.resolve(this._baseDir);
    }
    getModuleSchema() {
        return this.toolchainsComponent ? this.toolchainsComponent.getModuleSchema() : '';
    }
    getAppSchema() {
        return this.toolchainsComponent ? this.toolchainsComponent.getAppSchema() : '';
    }
    getSdkJsDir() {
        if (this.jsComponent) {
            return this.jsComponent.getBaseDir();
        }
        return '';
    }
    getSdkEtsDir() {
        return this.etsComponent ? this.etsComponent.getBaseDir() : '';
    }
    getSdkVersion() {
        return this._sdkVersion;
    }
    getReleaseType() {
        return this.toolchainsComponent ? this.toolchainsComponent.getReleaseType() : 'release';
    }
    getNodeJsDir() {
        const nodeJsPath = property_get_js_1.Property.getInstance().getNodeJsDir();
        if (nodeJsPath === "") {
            return undefined;
        }
        else {
            return path_1.default.resolve(nodeJsPath);
        }
    }
    getSdkNativeDir() {
        return this.nativeComponent.getBaseDir();
    }
    getCmakeTool() {
        return this.nativeComponent.getCmakeTool();
    }
    getNativeNinjaTool() {
        return this.nativeComponent.getNinjaTool();
    }
    getNativeToolchain() {
        return this.nativeComponent.getNativeToolchain();
    }
    getSdkToolchainsDir() {
        return this.toolchainsComponent ? this.toolchainsComponent.getBaseDir() : '';
    }
    getRestool() {
        return this.toolchainsComponent ? this.toolchainsComponent.getRestoolPath() : '';
    }
    getSysCapTool() {
        return this.toolchainsComponent ? this.toolchainsComponent.getSysCapToolPath() : '';
    }
    getSysCapFileInEts() {
        return this.etsComponent ? this.etsComponent.getSysCapFilePath() : '';
    }
    getSysCapFileInJs() {
        return this.jsComponent ? this.jsComponent.getSysCapFilePath() : '';
    }
    getVerifySignConfigTool() {
        return this.toolchainsComponent ? this.toolchainsComponent.getVerifySignConfigToolPath() : '';
    }
    getJsArkVersion() {
        return this.jsComponent ? this.jsComponent.getArkVersion() : '';
    }
    getRichSchema() {
        return this.toolchainsComponent ? this.toolchainsComponent.getRichSchema() : '';
    }
    getEtsArkVersion() {
        return this.etsComponent ? this.etsComponent.getArkVersion() : '';
    }
    getPackageTool() {
        return this.toolchainsComponent ? this.toolchainsComponent.getPackageToolPath() : '';
    }
    getSignDir() {
        return this.toolchainsComponent ? this.toolchainsComponent.getSignDir() : '';
    }
    getJsLoader() {
        return this.jsComponent ? this.jsComponent.getJsLoaderPath() : '';
    }
    getEtsLoader() {
        return this.etsComponent ? this.etsComponent.getEtsLoaderPath() : '';
    }
    getAapt2Tool() {
        return this.toolchainsComponent ? this.toolchainsComponent.getAapt2ToolPath() : '';
    }
    /**
     * 根据获取到的sdk-component名称创建不同的component实例
     *
     * @param {string} componentName
     */
    initComponents(componentName) {
        const component = this.findLocalComponent(componentName);
        const componentPath = path_1.default.resolve(this._baseDir, componentName, component.getVersion());
        switch (componentName) {
            case sdkmanager_common_1.ComponentPath.JS:
                this.jsComponent = new sdk_js_component_js_1.SdkJsComponent(component, componentPath);
                break;
            case sdkmanager_common_1.ComponentPath.ETS:
                this.etsComponent = new sdk_ets_component_js_1.SdkEtsComponent(component, componentPath);
                break;
            case sdkmanager_common_1.ComponentPath.TOOLCHAINS:
                this.toolchainsComponent = new sdk_toolchains_component_js_1.SdkToolchainsComponent(component, componentPath);
                break;
            case sdkmanager_common_1.ComponentPath.NATIVE:
                this.nativeComponent = new sdk_native_component_js_1.SdkNativeComponent(component, componentPath);
                break;
            default:
                break;
        }
    }
    /**
     * 根据传入的需要的实例类型查找本地sdk是否有对应sdk
     *
     * @param type 需要的实例类型
     * @private
     */
    findLocalComponent(type) {
        const result = this._localSdkComponents.get(new sdkmanager_common_1.PathAndApiVersion(type, this._sdkVersion));
        if (result === undefined) {
            this._log
                ._buildError(`Can not find the sdk type ${type} of API${this._sdkVersion}, Please download first.`)
                ._solution(`Check the sdk.dir,or install API${this._sdkVersion} ${type}. Please Open SDK Manager`)
                ._file(this._baseDir)
                ._printErrorAndExit();
        }
        return result;
    }
}
exports.SdkInfo = SdkInfo;
//# sourceMappingURL=sdk-info.js.map