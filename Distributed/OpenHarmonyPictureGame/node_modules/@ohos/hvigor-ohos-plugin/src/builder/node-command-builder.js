"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeCommandBuilder = void 0;
const base_command_builder_js_1 = require("./base-command-builder.js");
const path_1 = __importDefault(require("path"));
const system_util_js_1 = require("../utils/system-util.js");
class NodeCommandBuilder extends base_command_builder_js_1.BaseCommandBuilder {
    constructor(nodePath, supportNewEnvArgs) {
        super([]);
        this._supportNewEnvArgs = supportNewEnvArgs ? supportNewEnvArgs : false;
        this._envArgs = [];
        const nodeName = (0, system_util_js_1.isWindows)() ? "node.exe" : "node";
        this.commandList.push(path_1.default.join(nodePath, nodeName));
    }
    get supportNewEnvArgs() {
        return this._supportNewEnvArgs;
    }
    set supportNewEnvArgs(value) {
        this._supportNewEnvArgs = value;
    }
    get envArgs() {
        return this._envArgs;
    }
    set envArgs(value) {
        this._envArgs = value;
    }
    extendBuilder(nodeCommandBuilder) {
        this.addAllParams(nodeCommandBuilder.commandList);
        this._supportNewEnvArgs = nodeCommandBuilder.isEtsLoader();
        this._envArgs = nodeCommandBuilder.getEnvArgs();
        return this;
    }
    addWebpackPath(webpackPath) {
        this.commandList.push(webpackPath);
        return this;
    }
    addJsPath(jsPath) {
        this.commandList.push(jsPath);
        return this;
    }
    getTsVersion() {
        this.commandList.push('--bc-version');
        return this;
    }
    addWebpackConfig(config) {
        this.commandList.push('--config');
        this.commandList.push(config);
        return this;
    }
    addTitle(title) {
        this.commandList.push(`--title=${title}`);
        return this;
    }
    addDeviceType(deviceTypeList) {
        const deviceTypes = deviceTypeList.join(',');
        if (this.supportNewEnvArgs) {
            this.addEnvArgs('deviceType', deviceTypes);
        }
        else {
            this.commandList.push('--deviceType');
            this.commandList.push(deviceTypes);
        }
        return this;
    }
    addBuildMode(isDebug) {
        const buildMode = isDebug ? "debug" : "release";
        if (this.supportNewEnvArgs) {
            this.addEnvArgs('buildMode', buildMode);
        }
        else {
            this.commandList.push('--buildMode');
            this.commandList.push(buildMode);
        }
        return this;
    }
    addCompilerType(compilerType) {
        if (this.supportNewEnvArgs) {
            this.addEnvArgs('compilerType', compilerType);
        }
        else {
            this.commandList.push('--compilerType');
            this.commandList.push(compilerType);
        }
        return this;
    }
    //  Override
    build() {
        this.appendEnvArgs();
        return super.build();
    }
    isEtsLoader() {
        return this._supportNewEnvArgs;
    }
    getEnvArgs() {
        return this._envArgs;
    }
    addEnvArgs(key, value) {
        this._envArgs.push(`${key}=${value}`);
    }
    appendEnvArgs() {
        if (!this.supportNewEnvArgs || this._envArgs.length === 0) {
            return;
        }
        if (this.commandList.indexOf('--env') == -1) {
            this.commandList.push('--env');
        }
        super.commandList = this.commandList.concat(this._envArgs);
        this._envArgs = [];
    }
}
exports.NodeCommandBuilder = NodeCommandBuilder;
//# sourceMappingURL=node-command-builder.js.map