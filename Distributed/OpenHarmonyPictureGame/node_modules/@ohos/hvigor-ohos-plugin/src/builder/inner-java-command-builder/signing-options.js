"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SigningOptions = void 0;
const java_command_builder_js_1 = require("../java-command-builder.js");
class SigningOptions extends java_command_builder_js_1.JavaCommandBuilder {
    sign() {
        this.commandList.push('sign');
        return this;
    }
    addMode(mode) {
        this.commandList.push('-mode');
        this.commandList.push(mode);
        return this;
    }
    addProfile(profile) {
        this.commandList.push('-profile');
        this.commandList.push(profile);
        return this;
    }
    addSignAlg(signAlg) {
        this.commandList.push('-signAlg');
        this.commandList.push(signAlg);
        return this;
    }
    addPrivateKey(privateKey) {
        this.commandList.push('-privatekey');
        this.commandList.push(privateKey);
        return this;
    }
    profileSigned() {
        this.commandList.push('-profileSigned');
        this.commandList.push('1');
        return this;
    }
    addKeyStore(keyStoreFile) {
        this.commandList.push('-keystore');
        this.commandList.push(keyStoreFile);
        return this;
    }
    addKeyStorePwd(keyStorePwd) {
        this.commandList.push('-keystorepasswd');
        this.commandList.push(keyStorePwd);
        return this;
    }
    addKeyAliasPwd(keyAliasPwd) {
        this.commandList.push('-keyaliaspasswd');
        this.commandList.push(keyAliasPwd);
        return this;
    }
    addCertPath(certPath) {
        this.commandList.push('-certpath');
        this.commandList.push(certPath);
        return this;
    }
    addKs(ks) {
        this.commandList.push('--ks');
        this.commandList.push(ks);
        return this;
    }
    addKsPass(ksPass) {
        this.commandList.push('--ks-pass');
        this.commandList.push(ksPass);
        return this;
    }
    addKsKeyAlias(ksKeyAlias) {
        this.commandList.push('--ks-key-alias');
        this.commandList.push(ksKeyAlias);
        return this;
    }
    addKeyPass(keyPass) {
        this.commandList.push('--key-pass');
        this.commandList.push(keyPass);
        return this;
    }
    addOut(out) {
        this.commandList.push('--out');
        this.commandList.push(out);
        return this;
    }
    addInputFile(inputFile) {
        this.commandList.push('-inputFile');
        this.commandList.push(inputFile);
        return this;
    }
    addOutputFile(outputFile) {
        this.commandList.push('-outputFile');
        this.commandList.push(outputFile);
        return this;
    }
    add(param) {
        this.commandList.push(param);
        return this;
    }
}
exports.SigningOptions = SigningOptions;
//# sourceMappingURL=signing-options.js.map