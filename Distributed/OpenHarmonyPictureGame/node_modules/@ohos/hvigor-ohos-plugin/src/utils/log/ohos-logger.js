"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 *
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OhosLogger = void 0;
const hvigor_base_1 = require("@ohos/hvigor-base");
const os_1 = __importDefault(require("os"));
/**
 * Hvigor-Ohos-Plugin的定制logger
 *
 * @since 2022/3/3
 */
class OhosLogger extends hvigor_base_1.HvigorLogger {
    constructor(category) {
        super(category);
        this.messageMap = new Map();
    }
    /**
     * 获取对应类别的OhosLogger实例
     *
     * @param category 默认是default
     */
    static getLogger(category) {
        return new OhosLogger(category);
    }
    _buildError(cause, errorCode) {
        if (errorCode) {
            this.messageMap.set('code', errorCode);
        }
        this.messageMap.set('cause', cause);
        return this;
    }
    _solution(solution) {
        this.messageMap.set('solution', solution);
        return this;
    }
    _file(file, line = 1, column = 1) {
        this.messageMap.set('file', `at ${file}:${line}:${column}`);
        return this;
    }
    _help(help) {
        this.messageMap.set('help', help);
        return this;
    }
    _callstack(callstack) {
        if (this.getLevel() === hvigor_base_1.levels.DEBUG) {
            this.messageMap.set('callstack', callstack);
        }
        return this;
    }
    _printTaskInfo(moduleName, taskName, time) {
        this.info(`Finished :${moduleName}:${taskName}... after ${time}`);
    }
    _printFailedTaskInfo(moduleName, taskName) {
        if (taskName !== undefined) {
            this.error(`Failed :${moduleName}:${taskName}... `);
        }
        return this;
    }
    _printDebugCommand(toolName, command) {
        this.debug(`[${toolName}]\n`, command);
    }
    _printWarn(moduleName) {
        const values = Array.from(this.messageMap.values());
        this.warn(this._formatLog(moduleName), ...values);
    }
    _printError(moduleName) {
        const values = Array.from(this.messageMap.values());
        this.error(this._formatLog(moduleName), ...values);
    }
    _printErrorAndExit(moduleName = "root") {
        const values = Array.from(this.messageMap.values());
        this.errorMessageExit(this._formatLog(moduleName), ...values);
    }
    _formatLog(moduleName) {
        let format = `A problem occurred in ${moduleName} module:${os_1.default.EOL}`;
        if (this.messageMap.has('code')) {
            format += `\t ERROR: Code: %s${os_1.default.EOL}`;
        }
        format += `\t ERROR: Cause: %s${os_1.default.EOL}`;
        if (this.messageMap.has('solution')) {
            format += `\t ERROR: Solution: %s${os_1.default.EOL}`;
        }
        if (this.messageMap.has('file')) {
            format += `\t %s${os_1.default.EOL}`;
        }
        if (this.messageMap.has('help')) {
            format += `\t ERROR: HelpUrl: %s${os_1.default.EOL}`;
        }
        if (this.messageMap.has('callstack')) {
            format += `${os_1.default.EOL + os_1.default.EOL}    %s`;
        }
        this.messageMap.clear();
        return format;
    }
    _getCliLevel() {
        const levelMap = {
            "debug": "-d",
            "error": "-q",
            "warn": "-w",
            "info": "-i"
        };
        let key = this.getLevel();
        if (typeof key !== "string") {
            key = key.levelStr.toLowerCase();
        }
        return levelMap[key];
    }
}
exports.OhosLogger = OhosLogger;
//# sourceMappingURL=ohos-logger.js.map