"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidateUtil = void 0;
const ajv_1 = __importDefault(require("ajv"));
const project_file_reader_js_1 = require("./project-file-reader.js");
const ohos_logger_1 = require("./log/ohos-logger");
const util = __importStar(require("util"));
const os = __importStar(require("os"));
const fs = __importStar(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const java_command_builder_1 = require("../builder/java-command-builder");
const process_utils_1 = require("./process-utils");
const common_const_1 = require("../const/common-const");
/**
 * 校验的工具类
 *
 * @since 2021/12/29
 */
class ValidateUtil {
    /**
     * 根据schema规则校验JSON5的内容
     *
     * @param moduleName 校验文件所属module
     * @param filePath 需要校验的JSON5文件路径
     * @param schema schema文件的json对象
     * @protected
     */
    static doSchemaCheck(moduleName, filePath, schema) {
        var _a;
        const ajv = new ajv_1.default({ strict: false, allErrors: true });
        const validate = ajv.compile(schema);
        const buildProfile = project_file_reader_js_1.ProjectFileReader.getJson5Obj(filePath);
        const valid = validate(buildProfile);
        if (valid) {
            ValidateUtil._log.debug(`Schema ${filePath} success.`);
        }
        else {
            const errors = validate.errors;
            if (errors === undefined || errors === null) {
                return;
            }
            const errorsInfo = [];
            (_a = validate.errors) === null || _a === void 0 ? void 0 : _a.forEach((value) => {
                const valueInfo = {
                    instancePath: value.instancePath,
                    keyword: value.keyword,
                    params: util.format(value.params),
                    message: value.message
                };
                errorsInfo.push(valueInfo);
            });
            ValidateUtil._log._buildError("Schema validate failed!")
                ._solution(`Please check the following fields in the file:${os.EOL}${util.format(errorsInfo)}`)
                ._file(filePath)
                ._printErrorAndExit(moduleName);
        }
    }
    /**
     *根据SignConfig中的p7b文件调用sign-hap-tool获取bundleName
     *
     * @param taskService taskService
     * @param signingConfigObj signingConfigObject
     */
    static getBundleNameFromP7b(taskService, signingConfigObj) {
        if (signingConfigObj !== undefined) {
            //  获取hap签名工具
            const verifyTool = taskService.getSdkInfo().getVerifySignConfigTool();
            if (verifyTool === undefined) {
                this._log._buildError('The relevant HAP signing tool is not found in the SDK.')
                    ._solution('Please check the toolchains directory of the SDK.')
                    ._file(taskService.getSdkInfo().getSdkToolchainsDir())
                    ._printErrorAndExit();
            }
            //  调用hap-sign-tool对p7b文件处理并获取bundleName
            const signingConfigP7bFile = signingConfigObj.material.profile;
            const tempDirForSignConfigCheck = fs.mkdtempSync("TempDirForSignConfigCheck");
            const signConfigCheckJsonFile = path_1.default.resolve(tempDirForSignConfigCheck, 'signConfigCheckJson.json');
            const builder = new java_command_builder_1.JavaCommandBuilder();
            const commands = builder
                .addCalledJarFile(verifyTool)
                .addJvmOption('verify-profile')
                .addJvmOption('-inFile')
                .addJvmOption(signingConfigP7bFile)
                .addJvmOption('-outFile')
                .addJvmOption(signConfigCheckJsonFile)
                .build();
            new process_utils_1.ProcessUtils().executeSync(commands);
            const signingConfigP7bJson = project_file_reader_js_1.ProjectFileReader.getJson5Obj(signConfigCheckJsonFile);
            const bundleNameFromP7b = signingConfigP7bJson['content']['bundle-info']['bundle-name'];
            if (fs.existsSync(signConfigCheckJsonFile)) {
                fs.removeSync(signConfigCheckJsonFile.toString());
                fs.removeSync(tempDirForSignConfigCheck);
            }
            return bundleNameFromP7b;
        }
        return null;
    }
    /**
     * 获取hap包中的bundleName
     *
     * @param taskService ModuleTaskService
     */
    static getBundleNameFromHap(taskService) {
        var _a;
        const sourceRoot = (_a = taskService.getModuleModel()) === null || _a === void 0 ? void 0 : _a.getSourceRootByTargetName();
        if (taskService.getHapExtraInfo().isStageMode()) {
            return taskService.getProjectModel().getDefaultBundleName();
        }
        const configJsonPath = path_1.default.resolve(sourceRoot, common_const_1.CommonConst.CONFIG_JSON);
        const configJson = project_file_reader_js_1.ProjectFileReader.getJson5Obj(configJsonPath);
        return configJson.app.bundleName;
    }
}
exports.ValidateUtil = ValidateUtil;
ValidateUtil._log = ohos_logger_1.OhosLogger.getLogger(ValidateUtil.name);
//# sourceMappingURL=validate-util.js.map