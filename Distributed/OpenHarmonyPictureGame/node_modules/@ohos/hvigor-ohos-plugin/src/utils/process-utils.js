"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessUtils = void 0;
const execa_1 = __importDefault(require("execa"));
const ohos_logger_1 = require("./log/ohos-logger");
const iconv = __importStar(require("iconv-lite"));
const system_util_js_1 = require("./system-util.js");
const fs_1 = __importDefault(require("fs"));
const os = __importStar(require("os"));
/**
 * 执行命令的工具类
 *
 * @since 2021-12-14
 */
class ProcessUtils {
    constructor(moduleName = "root", taskName = undefined, errLog = 'Tools execution failed.', solution = 'Please check the message from tools.', charset = "utf-8") {
        this._log = ohos_logger_1.OhosLogger.getLogger(ProcessUtils.name);
        this._defaultOptions = {
            encoding: null
        };
        this._moduleName = moduleName;
        this._taskName = taskName;
        this._errlog = errLog;
        this._solution = solution;
        this._ohosCharset = charset;
    }
    /**
     * 同步地执行命令，并打印结果。同步的执行方式必然需要等到执行结束
     *
     * @param command 命令
     * @param options - 传入参数
     * @param combine
     */
    executeSync(command, options, combine = false) {
        var _a, _b, _c;
        const mergedOptions = this.processOptionsFactory(options);
        let result;
        try {
            this.validateExecuteFile(command[0]);
            result = execa_1.default.sync(command[0], command.slice(1), mergedOptions);
            if (((_a = result.stdout) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                this._log.debug(iconv.decode(result.stdout, this._ohosCharset));
            }
            if (((_b = result.stderr) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                if (combine) {
                    this._log.debug(iconv.decode(result.stderr, this._ohosCharset));
                }
                else {
                    this._log.warn(iconv.decode(result.stderr, this._ohosCharset));
                }
            }
            if (result.exitCode !== 0) {
                this._log._printFailedTaskInfo(this._moduleName, this._taskName)
                    ._buildError(this._errlog)
                    ._solution(iconv.decode(result.stderr, this._ohosCharset))
                    ._printErrorAndExit(this._moduleName);
            }
        }
        catch (e) {
            this._log._printFailedTaskInfo(this._moduleName, this._taskName);
            if (((_c = e.stdout) === null || _c === void 0 ? void 0 : _c.length) > 0) {
                this._log.error(iconv.decode(e.stdout, this._ohosCharset));
            }
            if (e.stderr) {
                this._log._buildError(`${this._errlog}${os.EOL}${iconv.decode(e.stderr, this._ohosCharset)}`);
            }
            else {
                this._log._buildError(`${this._errlog}${os.EOL}${e.message}`);
            }
            this._log._solution(this._solution);
            this._log._printErrorAndExit(this._moduleName);
        }
        return result;
    }
    /**
     * 生成execa需要的options入参
     *
     * @param options - 传入参数
     */
    processOptionsFactory(options) {
        var _a;
        const path = process.env.PATH;
        if (((_a = options === null || options === void 0 ? void 0 : options.env) === null || _a === void 0 ? void 0 : _a.path) && path) {
            options.env.path = path + ((0, system_util_js_1.isWindows)() ? ';' : ':') + options.env.path;
        }
        return Object.assign(Object.assign({}, this._defaultOptions), options);
    }
    validateExecuteFile(file) {
        if (file === "java") {
            return;
        }
        if (!fs_1.default.existsSync(file)) {
            this._log._buildError("Not an internal or external command, nor a runnable program Or batch files.")
                ._file(file)
                ._printErrorAndExit(this._moduleName);
        }
    }
}
exports.ProcessUtils = ProcessUtils;
//# sourceMappingURL=process-utils.js.map