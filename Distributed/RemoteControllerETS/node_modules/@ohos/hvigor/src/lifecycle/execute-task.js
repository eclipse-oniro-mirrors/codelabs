"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.executeModuleTask = void 0;
const hvigor_base_1 = require("@ohos/hvigor-base");
const register_exports_1 = require("../register-exports");
const index_1 = require("../../index");
const sync_1 = require("./sync");
const profile_js_1 = require("./profile.js");
const _log = hvigor_base_1.HvigorLogger.getLogger("execute-task.js");
/**
 * 执行module级别的任务
 *
 * @param project
 * @param opts
 */
function executeModuleTask(project, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const modules = hvigor_base_1.vigorConfigInst.getExtraConfig().get("module");
        // 如果不指定module则默认执行所有module对应的任务
        if (modules === undefined) {
            yield Promise.all(project.getAllSubProjects().map((module) => {
                execute(module, false, opts);
            })).catch(error => {
                _log.error(error);
            });
        }
        else {
            yield Promise.all(modules.split(",").map((value) => {
                const values = value.split("@");
                const module = project.findModuleByName(values[0]);
                if (module === undefined) {
                    _log.errorMessageExit(`Unknown module '${values[0]}' in command lines,Please check!`);
                }
                execute(module, true, opts);
            })).catch(error => {
                _log.error(error);
            });
        }
    });
}
exports.executeModuleTask = executeModuleTask;
/**
 * 创建hvigor实例，注册任务并执行
 *
 * @param model module或者project的Hvigor模型
 * @param shouldCheckTask 根据用户配置看是否需要检查任务是否存在
 * @param opts 命令行中的配置
 */
function execute(model, shouldCheckTask, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const tasks = opts._;
        const toRun = tasks.length ? tasks : ['default'];
        const needSync = opts.sync;
        const moduleName = model.getName();
        const HvigorClass = require(index_1.hvigorPath).Hvigor;
        const vigorInst = new HvigorClass();
        const registryTasks = (0, register_exports_1.registerExports)(vigorInst, model.exported);
        if (needSync) {
            profile_js_1.profile.executed += 1;
            yield (0, sync_1.sync)(model, registryTasks, vigorInst);
            return;
        }
        const finallyToRun = toRun.filter((taskName) => {
            return registryTasks.has(taskName);
        });
        // 指定了具体要执行的模块,但是找不到对应的任务
        if (!needSync && shouldCheckTask && finallyToRun.length === 0) {
            _log.errorMessageExit(`Task ${toRun} not found in module:${moduleName}.`);
        }
        // 未指定具体要执行的模块,没有可执行任务时直接返回
        if (finallyToRun.length === 0) {
            _log.debug(`No task found to execute in ${moduleName}!`);
            return;
        }
        profile_js_1.profile.executed += finallyToRun.length;
        const runMethod = opts.series ? 'series' : 'parallel';
        vigorInst[runMethod](finallyToRun)(function (err) {
            if (err) {
                _log.errorExit(err.message);
            }
        });
    });
}
exports.execute = execute;
//# sourceMappingURL=execute-task.js.map