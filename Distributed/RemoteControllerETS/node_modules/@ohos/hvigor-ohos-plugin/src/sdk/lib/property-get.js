"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Property = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const common_const_js_1 = require("../../const/common-const.js");
const property_const_js_1 = require("../../const/property-const.js");
const ohos_logger_js_1 = require("../../utils/log/ohos-logger.js");
const localPropertiesPath = path_1.default.resolve(process.cwd(), common_const_js_1.CommonConst.LOCAL_PROPERTIES);
/**
 * 读取项目目录下local.properties文件
 *
 * @since 2021-12-16
 */
class Property {
    constructor() {
        this._log = ohos_logger_js_1.OhosLogger.getLogger(Property.name);
        this._properties = new Map();
        // read local.properties first and path next
        Property._readFile().split(/\r?\n/).forEach(this._setProperty, this);
        this._readPath();
        this._validate();
    }
    static getInstance() {
        if (this.instance) {
            return this.instance;
        }
        this.instance = new Property();
        return this.instance;
    }
    /**
     * 读取当前命令行执行的路径下的local.properties的内容
     *
     * @returns {string} local.properties的内容
     */
    static _readFile() {
        if (!fs_extra_1.default.existsSync(localPropertiesPath)) {
            return "";
        }
        return fs_extra_1.default.readFileSync(localPropertiesPath, { encoding: "utf-8" });
    }
    /**
     * 读取路径时将分隔符转为正斜杆
     * eg: a\\b\\c -> a/b/c
     *
     * @param {string} oriString 原始字符串
     * @returns {string} 转化后的字符串
     */
    static normalizePathSeparator(oriString) {
        return oriString.replace(/\\\\/g, "/")
            .replace(/\\/g, '/')
            .replace(/\/:/g, ':');
    }
    getProperty(key) {
        if (this._properties.has(key)) {
            const value = this._properties.get(key);
            return value ? value : '';
        }
        return '';
    }
    getNodeJsDir() {
        return this.getProperty(property_const_js_1.PropertyConst.NODE_JS_DIR);
    }
    getNpmDir() {
        return this.getProperty(property_const_js_1.PropertyConst.NPM_DIR);
    }
    getSdkDir() {
        return this.getProperty(property_const_js_1.PropertyConst.SDK_DIR);
    }
    _validate() {
        // validate sdk and node js
        this.validatePath(property_const_js_1.PropertyConst.SDK_DIR, "OHOS_SDK_HOME");
        this.validatePath(property_const_js_1.PropertyConst.NODE_JS_DIR, "NODE_HOME");
    }
    validatePath(propertyKey, pathKey) {
        if (!this._properties.has(propertyKey)) {
            this._log._buildError(`Can not find ${propertyKey} or ${pathKey} in System Environment Path`)
                ._file(localPropertiesPath)
                ._printErrorAndExit();
            this._log.errorMessageExit(`Can not find ${propertyKey}. Configure it in local.properties or PATH.`);
        }
        const requiredPath = this._properties.get(propertyKey);
        if (!fs_extra_1.default.existsSync(requiredPath)) {
            this._log._buildError(`${propertyKey} configured in 'local.properties' or ${pathKey} in System Environment Path is invalid,Please check`)
                ._file(requiredPath)
                ._printErrorAndExit();
        }
    }
    _readPath() {
        // require sdk and node
        this._setPathIfNotExist(property_const_js_1.PropertyConst.SDK_DIR, process.env.OHOS_SDK_HOME);
        this._setPathIfNotExist(property_const_js_1.PropertyConst.NODE_JS_DIR, process.env.NODE_HOME);
        this._setPathIfNotExist(property_const_js_1.PropertyConst.NPM_DIR, process.env.NODE_HOME);
    }
    _setPathIfNotExist(mapKey, envValue) {
        if (this._properties.has(mapKey) || !envValue) {
            return;
        }
        this._properties.set(mapKey, Property.normalizePathSeparator(envValue));
    }
    _setProperty(text) {
        const trimText = text.trim();
        if (!trimText) {
            return;
        }
        const property = /^([^#=]+)(={0,1})(.*)$/.exec(trimText);
        if (property) {
            this._properties.set(property[1].trim(), Property.normalizePathSeparator(property[3].trim()));
        }
    }
}
exports.Property = Property;
//# sourceMappingURL=property-get.js.map