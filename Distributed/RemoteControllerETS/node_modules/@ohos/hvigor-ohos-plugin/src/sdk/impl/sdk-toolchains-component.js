"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkToolchainsComponent = void 0;
const sdk_component_js_1 = require("../superior/sdk-component.js");
const common_const_js_1 = require("../../const/common-const.js");
const path_1 = __importDefault(require("path"));
const system_util_js_1 = require("../../utils/system-util.js");
const sdk_version_enum_js_1 = require("../../version/sdk-version-enum.js");
const sdk_const_js_1 = require("../../const/sdk-const.js");
/**
 * sdk toolchains实例
 */
class SdkToolchainsComponent extends sdk_component_js_1.SdkComponent {
    constructor(component, baseDir) {
        super(component, baseDir);
        const resTool = (0, system_util_js_1.isWindows)() ? 'restool.exe' : 'restool';
        const sysCapTool = (0, system_util_js_1.isWindows)() ? 'syscap_tool.exe' : 'syscap_tool';
        this._restoolPath = path_1.default.resolve(baseDir, resTool);
        this._sysCapToolPath = path_1.default.resolve(baseDir, sysCapTool);
        this._sysCapFilePath = path_1.default.resolve(baseDir, 'devices');
        this._verifySignConfigPath = path_1.default.resolve(baseDir, SdkToolchainsComponent.LIB, 'hap-sign-tool.jar');
        const aaptTool = (0, system_util_js_1.isWindows)() ? 'aapt2.exe' : 'aapt';
        this._aapt2ToolPath = path_1.default.resolve(baseDir, SdkToolchainsComponent.INSTALL_ASSISTANT, aaptTool);
        this._signDir = path_1.default.resolve(baseDir, SdkToolchainsComponent.LIB);
        this._richSchema = path_1.default.resolve(baseDir, SdkToolchainsComponent.CONFIG_CHECK, SdkToolchainsComponent.RICH_SCHEMA);
        this._liteSchema = path_1.default.resolve(baseDir, SdkToolchainsComponent.CONFIG_CHECK, SdkToolchainsComponent.LITE_SCHEMA);
        this._moduleSchema = path_1.default.resolve(baseDir, SdkToolchainsComponent.MODULE_CHECK, common_const_js_1.CommonConst.MODULE_JSON);
        this._appSchema = path_1.default.resolve(baseDir, SdkToolchainsComponent.MODULE_CHECK, common_const_js_1.CommonConst.APP_SCHEMA_JSON);
    }
    getRestoolPath() {
        return this._restoolPath;
    }
    getSysCapToolPath() {
        return this._sysCapToolPath;
    }
    getVerifySignConfigToolPath() {
        return this._verifySignConfigPath;
    }
    getRichSchema() {
        return this._richSchema;
    }
    getPackageToolPath() {
        const packTool = this.getComponentVersion().isHigherThan(sdk_version_enum_js_1.SdkVersionEnum.NEW_PACK_TOOL) ?
            sdk_const_js_1.ToolChainsConst.APP_PACKING_TOOL_JAR : sdk_const_js_1.ToolChainsConst.HMOS_APP_PACKING_TOOL_JAR;
        return path_1.default.resolve(this.getBaseDir(), SdkToolchainsComponent.LIB, packTool);
    }
    getSignDir() {
        return this._signDir;
    }
    getModuleSchema() {
        return this._moduleSchema;
    }
    getAppSchema() {
        return this._appSchema;
    }
    getAapt2ToolPath() {
        return this._aapt2ToolPath;
    }
}
exports.SdkToolchainsComponent = SdkToolchainsComponent;
SdkToolchainsComponent.MODULE_CHECK = 'modulecheck';
SdkToolchainsComponent.CONFIG_CHECK = 'configcheck';
SdkToolchainsComponent.LIB = 'lib';
SdkToolchainsComponent.INSTALL_ASSISTANT = 'install-assistant';
SdkToolchainsComponent.LITE_SCHEMA = 'configSchema_lite.json';
SdkToolchainsComponent.RICH_SCHEMA = 'configSchema_rich.json';
//# sourceMappingURL=sdk-toolchains-component.js.map