"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyscapTransform = void 0;
const ohos_hap_task_js_1 = require("./task/ohos-hap-task.js");
const process_utils_js_1 = require("../utils/process-utils.js");
const common_const_js_1 = require("../const/common-const.js");
const path_1 = __importDefault(require("path"));
const file_util_js_1 = require("../utils/file-util.js");
const fs = __importStar(require("fs"));
const array_util_js_1 = require("../utils/array-util.js");
const fse = __importStar(require("fs-extra"));
const lodash_1 = require("lodash");
const project_file_reader_js_1 = require("../utils/project-file-reader.js");
const ohos_logger_js_1 = require("../utils/log/ohos-logger.js");
/**
 * Syscap Transform Task
 *
 * @since 2022/02/22
 */
class SyscapTransform extends ohos_hap_task_js_1.OhosHapTask {
    constructor(taskService) {
        super(taskService, "SyscapTransform");
        this._log = ohos_logger_js_1.OhosLogger.getLogger(SyscapTransform.name);
        this.hapExtraInfo = taskService.getHapExtraInfo();
    }
    doTaskAction(targetData, target) {
        var _a, _b;
        const sourceRoot = (_a = this.service.getModuleModel()) === null || _a === void 0 ? void 0 : _a.getSourceRootByTargetName(target);
        const pathInfo = targetData.getPathInfo();
        const sdkInfo = this.service.getSdkInfo();
        const etsDir = sdkInfo.getSdkEtsDir();
        const jsDir = sdkInfo.getSdkJsDir();
        const etsRequireSysCapPath = sdkInfo.getSysCapFileInEts();
        const jsRequireSysCapPath = sdkInfo.getSysCapFileInJs();
        const regExp = /^SystemCapability(\.[a-zA-Z0-9]+){2,3}$/;
        let jsonFile;
        let deviceTypes;
        if (this.hapExtraInfo.isStageMode()) {
            const moduleJsonPath = path_1.default.resolve(sourceRoot, common_const_js_1.CommonConst.MODULE_JSON5);
            const moduleJson = project_file_reader_js_1.ProjectFileReader.getJson5Obj(moduleJsonPath);
            deviceTypes = moduleJson.module.deviceTypes;
            jsonFile = moduleJsonPath;
        }
        else {
            const configJsonPath = path_1.default.resolve(sourceRoot, common_const_js_1.CommonConst.CONFIG_JSON);
            const configJson = project_file_reader_js_1.ProjectFileReader.getJson5Obj(configJsonPath);
            deviceTypes = configJson.module.deviceType;
            jsonFile = configJsonPath;
        }
        //  判断是否存在syscap.json，如果不存在syscap.json，那么不启动rpcid的处理逻辑
        const sysCapJsonPath = path_1.default.resolve(sourceRoot, common_const_js_1.CommonConst.SYSCAP_JSON);
        if (fs.existsSync(sysCapJsonPath)) {
            const sysCapJson = project_file_reader_js_1.ProjectFileReader.getJson5Obj(sysCapJsonPath);
            const sysCapDevice = sysCapJson['devices'];
            const sysCapGeneral = sysCapDevice['general'];
            const sysCapCustom = sysCapDevice['custom'];
            const requireSysCapList = [];
            const nDeviceSysCapList = [];
            let intersectionSysCapList = [];
            //  纯N设备
            if (deviceTypes.length === 0) {
                if (sysCapGeneral !== undefined && sysCapGeneral.length !== 0) {
                    const cause = "The value of 'general' in the syscap.json file must be " +
                        "the same as that of 'deviceType' in the module.json5/config.json file.";
                    const solution = "Please check whether the general field in the syscap.json file " +
                        "and the deviceType field in the module.json5 or config.json file are correctly configured.";
                    this._log._buildError(cause)
                        ._solution(solution)
                        ._file(sysCapJsonPath)
                        ._printErrorAndExit();
                }
                //  纯N设备之间SysCap取交集
                intersectionSysCapList = this.intersectNDeviceSysCap(sysCapCustom, nDeviceSysCapList, regExp, sysCapJsonPath);
            }
            else {
                if (sysCapGeneral === undefined
                    || !(0, array_util_js_1.checkArrayElementIsSame)(sysCapGeneral, deviceTypes)) {
                    const cause = "The 'general' field in the syscap.json file must exist, " +
                        "and its value must be the same as " +
                        "the value of 'devicesType' in the module.json5 or config.json file.";
                    const solution = "Please check whether the syscap.json, module.json5, " +
                        "or config.json files are correctly configured.";
                    this._log._buildError(cause)
                        ._solution(solution)
                        ._file(sysCapJsonPath)
                        ._printErrorAndExit();
                }
                //  按照deviceType从sdk取出对应的syscap集合
                sysCapGeneral.forEach((deviceInSysCap) => {
                    if (fs.existsSync(jsDir) && !fs.existsSync(etsDir)) {
                        this.getRequireSysCapList(jsRequireSysCapPath, deviceInSysCap, requireSysCapList);
                    }
                    else {
                        this.getRequireSysCapList(etsRequireSysCapPath, deviceInSysCap, requireSysCapList);
                    }
                });
                //  通过SDK获得的SysCap与N设备SysCap取交集
                if (sysCapCustom !== undefined) {
                    const newNDeviceSysCapList = this.intersectNDeviceSysCap(sysCapCustom, nDeviceSysCapList, regExp, sysCapJsonPath);
                    intersectionSysCapList = newNDeviceSysCapList.filter(v => requireSysCapList.includes(v));
                }
            }
            //  根据production配置做增删
            const production = sysCapJson['production'];
            if (production !== undefined) {
                if (production['addedSysCaps'] !== undefined && production['addedSysCaps'].length !== 0) {
                    production['addedSysCaps'].forEach(((addedSysCap) => {
                        this.fieldRegExpCheck(addedSysCap, "addedSysCaps", regExp, sysCapJsonPath);
                        if (!intersectionSysCapList.includes(addedSysCap)) {
                            intersectionSysCapList.push(addedSysCap);
                        }
                    }));
                }
                if (production['removedSysCaps'] !== undefined && production['removedSysCaps'].length !== 0) {
                    production['removedSysCaps'].forEach((removedSysCap) => {
                        this.fieldRegExpCheck(removedSysCap, "removedSysCaps", regExp, sysCapJsonPath);
                        if (intersectionSysCapList.includes(removedSysCap)) {
                            intersectionSysCapList.splice(intersectionSysCapList.indexOf(removedSysCap), 1);
                        }
                    });
                }
            }
            if (intersectionSysCapList.length === 0) {
                return;
            }
            const newSysCapMap = new Map();
            const apiVersion = (_b = this.service.getModuleModel()) === null || _b === void 0 ? void 0 : _b.getCompileApiVersion();
            newSysCapMap.set("api_version", apiVersion);
            newSysCapMap.set("syscap", intersectionSysCapList);
            const sysCapIntermediatePath = pathInfo.getIntermediatesSysCap();
            file_util_js_1.FileUtil.checkDirWithoutDelete(sysCapIntermediatePath);
            const rpcidJsonPath = path_1.default.resolve(sysCapIntermediatePath, common_const_js_1.CommonConst.RPCID_JSON);
            fse.outputJsonSync(rpcidJsonPath, Object.fromEntries(newSysCapMap));
            //  syscap转换:rpcid.json -----> rpcid.sc
            const sysCapTool = this.service.getSdkInfo().getSysCapTool();
            new process_utils_js_1.ProcessUtils(this.moduleName, this.taskName).executeSync([sysCapTool, "-R", "-e", "-i", rpcidJsonPath, "-o", sysCapIntermediatePath]);
        }
        else if (deviceTypes.length === 0) {
            const cause = "The 'deviceTypes' field in the module.json5 or config.json file " +
                "may be empty or does not exist.";
            const solution = "If the 'deviceTypes' field in the module.json5 or config.json file is empty " +
                "or does not exist, import and correctly configure the syscap.json file.";
            this._log._buildError(cause)
                ._solution(solution)
                ._file(jsonFile)
                ._printErrorAndExit();
        }
    }
    /**
     * 根据Syscap.json中deviceType获取sdk提供的对应deviceType的Syscap全集
     *
     * @param requireSysCapPath sdk/(etsPath/jsPath)
     * @param deviceInSysCap    Syscap.json中deviceType
     * @param requireSysCapList 对应Syscap全集
     */
    getRequireSysCapList(requireSysCapPath, deviceInSysCap, requireSysCapList) {
        fs.readdirSync(requireSysCapPath).forEach(deviceRequireSysCap => {
            if (deviceRequireSysCap.toString().slice(0, deviceRequireSysCap.toString().indexOf('.'))
                === deviceInSysCap) {
                const requireSysCapJson = project_file_reader_js_1.ProjectFileReader.getJson5Obj(path_1.default.resolve(requireSysCapPath, deviceRequireSysCap.toString()));
                requireSysCapJson['SysCaps'].forEach((sysCap) => {
                    if (!requireSysCapList.some(element => element === sysCap)) {
                        requireSysCapList.push(sysCap);
                    }
                });
            }
        });
    }
    /**
     * 求NDeviceType交集
     *
     * @param sysCapJson NDeviceType中SysCap
     * @param list  NDeviceType交集
     * @param regExp regExp
     * @param sysCapJsonPath sysCapJsonPath
     */
    intersectNDeviceSysCap(sysCapJson, list, regExp, sysCapJsonPath) {
        if (sysCapJson !== undefined) {
            sysCapJson.forEach((key) => {
                Object.keys(key).forEach(value => {
                    list.push(key[value]);
                });
            });
            for (let customIdx = 0; customIdx < list.length; customIdx++) {
                for (let customSysCapIdx = 0; customSysCapIdx < list[customIdx].length; customSysCapIdx++) {
                    this.fieldRegExpCheck(list[customIdx][customSysCapIdx], "custom", regExp, sysCapJsonPath);
                }
            }
        }
        return (0, lodash_1.intersection)(...list);
    }
    /**
     * custom,production字段syscap配置正则校验
     *
     * @param sysCap syscap能力集字段
     * @param sysCapField custom/production(addedSysCaps,removedSysCaps)
     * @param regExp regExp
     * @param sysCapJsonPath sysCapJsonPath
     */
    fieldRegExpCheck(sysCap, sysCapField, regExp, sysCapJsonPath) {
        if (!regExp.test(sysCap)) {
            const cause = `Please check whether the value of '${sysCapField}' in the syscap.json is correct.`;
            const solution = `Configure correct sysCaps in '${sysCapField}' according to the pattern:'${regExp}'.`;
            this._log._buildError(cause)
                ._solution(solution)
                ._file(sysCapJsonPath)
                ._printErrorAndExit();
        }
    }
}
exports.SyscapTransform = SyscapTransform;
//# sourceMappingURL=syscap-transform.js.map