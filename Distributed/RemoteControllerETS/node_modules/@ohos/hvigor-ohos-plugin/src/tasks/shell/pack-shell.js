"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackShell = void 0;
const ohos_hap_task_js_1 = require("../task/ohos-hap-task.js");
const fse = __importStar(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const archiver_1 = __importDefault(require("archiver"));
/**
 * pack dex and res into shell
 */
class PackShell extends ohos_hap_task_js_1.OhosHapTask {
    constructor(taskService) {
        super(taskService, "PackShell");
    }
    doTaskAction(targetData, target) {
        const allResFile = path_1.default.resolve(this.getTaskTempDir(targetData), "resFile");
        fse.outputFileSync(path_1.default.resolve(allResFile, "res", "drawable", "fakeres"), "fake res");
        fse.outputFileSync(path_1.default.resolve(allResFile, "res.arsc"), "fake arsc");
        fse.outputFileSync(path_1.default.resolve(allResFile, "AndroidManifest.xml"), "fake manifest");
        const dalvikDir = path_1.default.resolve(this.getTaskTempDir(targetData), "dalvik");
        fse.outputFileSync(path_1.default.resolve(dalvikDir, "classes.dex"), "fake dex");
        fse.outputFileSync(path_1.default.resolve(dalvikDir, "classes.dex2"), "fake dex2");
        const output = fse.createWriteStream(path_1.default.resolve(this.getTaskTempDir(targetData), "xx.apk"));
        const archive = (0, archiver_1.default)('zip', {
            zlib: { level: 9 },
            store: true
        });
        archive.pipe(output);
        archive.directory(allResFile, false).directory(dalvikDir, false);
        archive.finalize();
    }
}
exports.PackShell = PackShell;
//# sourceMappingURL=pack-shell.js.map