"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 *
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectHarDependency = void 0;
const node_util_js_1 = require("../utils/node-util.js");
const process_utils_js_1 = require("../utils/process-utils.js");
const ohos_hap_task_js_1 = require("./task/ohos-hap-task.js");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const resolve_package_path_1 = __importDefault(require("resolve-package-path"));
const build_directory_const_js_1 = require("../const/build-directory-const.js");
const common_const_js_1 = require("../const/common-const.js");
const module_type_enum_1 = require("../enum/module-type-enum");
const ohos_logger_js_1 = require("../utils/log/ohos-logger.js");
const project_file_reader_js_1 = require("../utils/project-file-reader.js");
/**
 * 收集node_modules中的npm har包依赖
 *
 * @since 2022/1/20
 */
class CollectHarDependency extends ohos_hap_task_js_1.OhosHapTask {
    constructor(taskService) {
        super(taskService, "CollectHarDependency");
        this._log = ohos_logger_js_1.OhosLogger.getLogger(CollectHarDependency.name);
        this.npmHarCollection = [];
        this.localHarCollection = [];
        this.localHarNames = [];
        this.allDependencySet = new Set();
        this.projectProfile = taskService.getProjectModel().getProfileOpt();
        this.isStageMode = taskService.getHapExtraInfo().isStageMode();
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    doTaskAction(targetData, target) {
        var _a, _b, _c;
        /*
         * 尝试读取module和project中的package.json的dependencies字段，通过require.resolve来获取每个依赖，存入中间目录
         * 并递归地读取依赖模块的package.json，等于利用require.resolve来弥补npm list的问题
         */
        const modulePkgJson = path_1.default.resolve((_a = this.service.getModuleModel()) === null || _a === void 0 ? void 0 : _a.getProjectDir(), common_const_js_1.CommonConst.PACKAGE_JSON);
        const projectPkgJson = path_1.default.resolve((_b = this.service.getProjectModel()) === null || _b === void 0 ? void 0 : _b.getProjectDir(), common_const_js_1.CommonConst.PACKAGE_JSON);
        const mergedNpmResFile = path_1.default.resolve(targetData.getPathInfo().getIntermediatesMergeRes(), build_directory_const_js_1.BuildArtifactConst.MERGE_NPM_FILE_JSON);
        this.npmHarCollection = [];
        this.allDependencySet = new Set();
        fs_extra_1.default.outputFileSync(mergedNpmResFile, "");
        if ((_c = this.service.getModuleModel()) === null || _c === void 0 ? void 0 : _c.isHapModule()) {
            this.collectNpmHarPaths([modulePkgJson, projectPkgJson]);
            for (const npmHarPath of this.npmHarCollection) {
                this._log.debug(`[HarNpm] Collect a har npm dependency: ${npmHarPath}`);
            }
        }
        fs_extra_1.default.outputJsonSync(mergedNpmResFile, {
            dependencies: this.npmHarCollection,
            local: {
                path: this.localHarCollection,
                name: this.localHarNames
            }
        });
        // 执行依赖的本地模块的构建任务
        this._log.debug(`LocalDependencies: %s`, this.localHarNames.join(', '));
        const nodeJsPath = (0, node_util_js_1.findValidNodeExePath)(this.service.getSdkInfo().getNodeJsDir());
        if (this.localHarNames.length > 0) {
            new process_utils_js_1.ProcessUtils(this.moduleName, this.taskName).executeSync(this.initExecuteCommand(this.localHarNames, nodeJsPath), {
                stdout: process.stdout,
                stderr: process.stderr
            });
        }
    }
    collectNpmHarPaths(pkgJsons) {
        var _a, _b;
        const pkgQueue = pkgJsons;
        while (pkgQueue.length > 0) {
            // queue中存放依赖中package.json的路径
            const curPkgJson = pkgQueue.shift();
            const curPkgPath = path_1.default.dirname(curPkgJson);
            const pkgObj = fs_extra_1.default.readJsonSync(curPkgJson, { throws: false });
            for (const pkgName in pkgObj === null || pkgObj === void 0 ? void 0 : pkgObj.dependencies) {
                // 该npm包的package.json路径和根路径
                const pkgJsonPath = (0, resolve_package_path_1.default)(pkgName, curPkgPath);
                if (pkgJsonPath === null) {
                    continue;
                }
                const packageJson = fs_extra_1.default.readJsonSync(pkgJsonPath, {
                    throws: false
                });
                const pkgPath = path_1.default.dirname(pkgJsonPath);
                if (!this.isValidHar(pkgPath)) {
                    continue;
                }
                // har包识别位，package.json中的name以@ohos/开头
                if (!((_a = packageJson.name) === null || _a === void 0 ? void 0 : _a.startsWith('@ohos/'))) {
                    continue;
                }
                // 考虑循环依赖，用set过滤重复项，向queue中添加package.json路径
                if (this.allDependencySet.has(packageJson.name)) {
                    continue;
                }
                this.allDependencySet.add(packageJson.name);
                // 收集项目中所有模块的srcPath，跟pkgPath进行比对，识别出开发态/发布态的区别
                (_b = this.projectProfile.modules) === null || _b === void 0 ? void 0 : _b.forEach(obj => {
                    if (path_1.default.resolve(process.cwd(), obj.srcPath) === pkgPath) {
                        this.localHarCollection.push(pkgPath);
                        this.localHarNames.push(obj.name);
                    }
                    return obj.srcPath;
                });
                this.npmHarCollection.push(pkgPath);
                pkgQueue.push(pkgJsonPath);
            }
        }
    }
    isValidHar(pkgPath) {
        var _a, _b, _c, _d;
        const module5File = path_1.default.resolve(pkgPath, "src", "main", common_const_js_1.CommonConst.MODULE_JSON5);
        const moduleFile = path_1.default.resolve(pkgPath, "src", "main", common_const_js_1.CommonConst.MODULE_JSON);
        const configFile = path_1.default.resolve(pkgPath, "src", "main", common_const_js_1.CommonConst.CONFIG_JSON);
        const solution = "Using OpenHarmony npm packages or modules that are compatible with current module. " +
            "Check the OpenHarmony npm package or module below:";
        if (fs_extra_1.default.existsSync(moduleFile) || fs_extra_1.default.existsSync(module5File) || fs_extra_1.default.existsSync(configFile)) {
            let isHar = false;
            if (fs_extra_1.default.existsSync(moduleFile)) {
                const moduleJson = project_file_reader_js_1.ProjectFileReader.getJson5Obj(moduleFile);
                isHar = ((_a = moduleJson.module) === null || _a === void 0 ? void 0 : _a.type) === module_type_enum_1.ModuleType.Har;
                if (isHar && !this.isStageMode) {
                    this._log._buildError(`FA model module ${this.moduleName} does not support including ` +
                        "OpenHarmony npm packages or modules in Stage model. OpenHarmony build tasks will not be " +
                        "executed, and OpenHarmony resources will not be packed.")
                        ._solution(solution)
                        ._file(pkgPath)
                        ._printErrorAndExit(this.moduleName);
                }
            }
            if (fs_extra_1.default.existsSync(module5File)) {
                const module5Json = project_file_reader_js_1.ProjectFileReader.getJson5Obj(module5File);
                isHar = ((_b = module5Json.module) === null || _b === void 0 ? void 0 : _b.type) === module_type_enum_1.ModuleType.Har;
                if (isHar && !this.isStageMode) {
                    this._log._buildError(`FA model module ${this.moduleName} does not support including ` +
                        "OpenHarmony npm packages or modules in Stage model. OpenHarmony build tasks will not be " +
                        "executed, and OpenHarmony resources will not be packed.")
                        ._solution(solution)
                        ._file(pkgPath)
                        ._printErrorAndExit(this.moduleName);
                }
            }
            if (fs_extra_1.default.existsSync(configFile)) {
                const configJson = fs_extra_1.default.readJsonSync(configFile);
                isHar = ((_d = (_c = configJson.module) === null || _c === void 0 ? void 0 : _c.distro) === null || _d === void 0 ? void 0 : _d.moduleType) === module_type_enum_1.ModuleType.Har;
                if (isHar && this.isStageMode) {
                    this._log._buildError(`Stage model module ${this.moduleName} does not support including ` +
                        "OpenHarmony npm packages or modules in FA model. OpenHarmony build tasks will not be " +
                        "executed, and OpenHarmony resources will not be packed.")
                        ._solution(solution)
                        ._file(pkgPath)
                        ._printErrorAndExit(this.moduleName);
                }
            }
            if (!isHar) {
                this._log._buildError(`Dependency in ${pkgPath} is not a valid OpenHarmony npm package or module.`)
                    ._solution("Check the config file of OpenHarmony npm package or module, and use a correct" +
                    "OpenHarmony npm package or module.")
                    ._file(pkgPath)
                    ._printErrorAndExit(this.moduleName);
            }
            return isHar;
        }
        return false;
    }
    initExecuteCommand(localHarNames, nodeJsPath) {
        const targets = localHarNames.map(name => {
            return `${name}@default`;
        });
        const command = [nodeJsPath, require.resolve("@ohos/hvigor/bin/hvigor"), "-m", "module"];
        command.push("-p");
        command.push(`product=default`);
        command.push("-p");
        command.push(`module=${targets.join(",")}`);
        command.push("assembleSubHar");
        command.push(this._log._getCliLevel());
        this._log._printDebugCommand("AssembleSubHar", command);
        return command;
    }
}
exports.CollectHarDependency = CollectHarDependency;
//# sourceMappingURL=collect-har-dependency.js.map