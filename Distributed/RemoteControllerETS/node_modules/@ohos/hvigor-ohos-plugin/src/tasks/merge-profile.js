"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MergeProfile = void 0;
const hvigor_base_1 = require("@ohos/hvigor-base");
const fs = __importStar(require("fs-extra"));
const lodash_1 = require("lodash");
const path_1 = __importDefault(require("path"));
const build_directory_const_js_1 = require("../const/build-directory-const.js");
const common_const_js_1 = require("../const/common-const.js");
const ohos_logger_js_1 = require("../utils/log/ohos-logger.js");
const project_file_reader_js_1 = require("../utils/project-file-reader.js");
const ohos_hap_task_js_1 = require("./task/ohos-hap-task.js");
/**
 * 合并module.json
 *
 * @since 2022/1/10
 */
class MergeProfile extends ohos_hap_task_js_1.OhosHapTask {
    constructor(taskService) {
        super(taskService, "MergeProfile");
        this._log = ohos_logger_js_1.OhosLogger.getLogger(MergeProfile.name);
    }
    doTaskAction(moduleTargetData, target) {
        this._moduleTargetData = moduleTargetData;
        const projectModel = this.service.getProjectModel();
        const appJson = projectModel.getAppRes().getAppResOpt();
        // har的app部分剔除与资源相关的字段，暂时也不需要
        if (this.service.getModuleModel().isHarModule()) {
            delete appJson.app.icon;
            delete appJson.app.label;
        }
        const targetSourceSetModel = this.service.getModuleModel()
            .getSourceSetByTargetName(target);
        const moduleOpt = targetSourceSetModel
            .getModuleTargetRes()
            .getModuleJsonOpt();
        const deviceTypes = moduleOpt.module.deviceTypes;
        if (this.service.getModuleModel().isHarModule() && deviceTypes.length === 0) {
            const cause = "The value of 'deviceType' in the module.json5 is empty.";
            const solution = "Please check the deviceType field in the module.json5 file is correctly configured.";
            this._log._buildError(cause)
                ._solution(solution)
                ._file(targetSourceSetModel.getModuleTargetRes().getJsonPath())
                ._printErrorAndExit();
        }
        // 三方依赖的module.json
        const mergedNpmResFile = path_1.default.resolve(moduleTargetData.getPathInfo().getIntermediatesMergeRes(), build_directory_const_js_1.BuildArtifactConst.MERGE_NPM_FILE_JSON);
        const harList = fs.readJsonSync(mergedNpmResFile, { throws: false }).dependencies;
        const localModuleList = fs.readJsonSync(mergedNpmResFile, { throws: false }).local.path;
        const harLibs = [...(0, lodash_1.difference)(harList, localModuleList).map(harPath => {
                return path_1.default.resolve(harPath, "src", "main", common_const_js_1.CommonConst.MODULE_JSON);
            }), ...localModuleList.map(harPath => {
                return path_1.default.resolve(harPath, build_directory_const_js_1.BuildDirConst.BUILD_ROOT, "default", build_directory_const_js_1.BuildDirConst.INTERMEDIATES, build_directory_const_js_1.BuildDirConst.INTERMEDIATES_MERGE_PROFILE, "default", common_const_js_1.CommonConst.MODULE_JSON);
            })];
        harLibs.map(harModuleJson => {
            if (fs.pathExistsSync(harModuleJson)) {
                return project_file_reader_js_1.ProjectFileReader.getJson5Obj(harModuleJson);
            }
            else {
                this._log.warn(`${harModuleJson} does not exist. This library will not be 
                merged. Please confirm the correctness of this module.`);
            }
        });
        const mergedConfigOpt = Object.assign(Object.assign({}, appJson), (moduleOpt));
        // 用项目配置覆盖模块的bundleName和api版本信息
        this.mergeDslConfig(mergedConfigOpt);
        // debug模式添加debug: true
        const debuggable = hvigor_base_1.vigorConfigInst.getExtraConfig().get(common_const_js_1.CommonConst.DEBUGGABLE);
        if (debuggable === undefined || debuggable !== "false") {
            mergedConfigOpt.app.debug = true;
        }
        // 将merged json写入文件
        const pathInfo = moduleTargetData.getPathInfo();
        const mergedModuleJson = pathInfo.getIntermediatesMergeProfile();
        fs.outputJSONSync(mergedModuleJson, mergedConfigOpt, { spaces: "\t" });
    }
    mergeDslConfig(mergeConfigOpt) {
        var _a, _b, _c;
        // 从product处获取bundleName
        const bundleName = (_a = this._moduleTargetData) === null || _a === void 0 ? void 0 : _a.getProduct().bundleName;
        const targetSdkVersion = (_b = this.service.getProjectModel()) === null || _b === void 0 ? void 0 : _b.getCompileApiVersion();
        const compatibleSdkVersion = (_c = this.service.getProjectModel()) === null || _c === void 0 ? void 0 : _c.getCompatibleApiVersion();
        const releaseType = this.sdkInfo.getReleaseType();
        if (bundleName) {
            mergeConfigOpt.app.bundleName = bundleName;
        }
        this._log.debug(`Change app bundleName with '${bundleName}'.`);
        mergeConfigOpt.app.targetAPIVersion = targetSdkVersion;
        this._log.debug(`Change app target API version with '${targetSdkVersion}'`);
        mergeConfigOpt.app.minAPIVersion = compatibleSdkVersion;
        this._log.debug(`Change app minimum API version with '${compatibleSdkVersion}'`);
        mergeConfigOpt.app.apiReleaseType = releaseType;
        this._log.debug(`Change app api release type with '${releaseType}'`);
    }
    mergeAllModule(mainModule, harModuleOpts) {
        var _a, _b;
        // 暂时只需要合并deviceTypes
        for (const harModuleOpt of harModuleOpts) {
            mainModule.module.deviceTypes = (0, lodash_1.intersection)((_a = mainModule.module) === null || _a === void 0 ? void 0 : _a.deviceTypes, (_b = harModuleOpt.module) === null || _b === void 0 ? void 0 : _b.deviceTypes);
        }
        return mainModule;
    }
}
exports.MergeProfile = MergeProfile;
//# sourceMappingURL=merge-profile.js.map