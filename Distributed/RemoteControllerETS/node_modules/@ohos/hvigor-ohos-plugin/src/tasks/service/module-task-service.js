"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleTaskService = void 0;
const build_directory_const_js_1 = require("../../const/build-directory-const.js");
const hap_task_target_data_1 = require("../data/hap-task-target-data");
const find_target_product_1 = require("../../common/find-target-product");
const hvigor_base_1 = require("@ohos/hvigor-base");
const task_service_1 = require("./task-service");
const sdk_info_1 = require("../../sdk/sdk-info");
const module_path_info_iml_1 = require("../../common/iml/module-path-info-iml");
const code_type_enum_1 = require("../../enum/code-type-enum");
const project_extra_info_service_js_1 = require("../../project/project-extra-info-service.js");
const ohos_logger_js_1 = require("../../utils/log/ohos-logger.js");
const util = __importStar(require("util"));
const sdkmanager_common_1 = require("@ohos/sdkmanager-common");
const common_const_js_1 = require("../../const/common-const.js");
/**
 * 基于持久化module的模型层提供的数据，经过处理后,提供给打包hap任务流需要使用的服务和数据
 *
 * @since 2022/1/20
 */
class ModuleTaskService extends task_service_1.TaskService {
    constructor(projectModel, moduleModel) {
        super(projectModel);
        this._log = ohos_logger_js_1.OhosLogger.getLogger(ModuleTaskService.name);
        this.computeTargets = () => {
            // 默认不配置target时,执行所有的target,考虑是否用这个关键字
            const targets = ["all"];
            const configModules = hvigor_base_1.vigorConfigInst.getExtraConfig().get("module");
            if (configModules === undefined) {
                return targets;
            }
            const modules = configModules.split(",");
            for (let i = 0; i < modules.length; i++) {
                const module = modules[i];
                const values = module.split("@");
                if (this._moduleModel.getName() !== values[0]) {
                    continue;
                }
                for (let j = 1; j < values.length; j++) {
                    targets[j - 1] = values[j];
                }
            }
            return targets;
        };
        this.checkNeedPack = (targetProduct, targetName, curModuleConfigTargets) => {
            let needPack = false;
            if (curModuleConfigTargets.indexOf(targetName) > -1) {
                needPack = true;
            }
            if ((curModuleConfigTargets.indexOf("all") > -1)) {
                // 默认不配置target时,不打包ohosTest的包
                needPack = targetName !== "ohosTest";
            }
            const checkApplyProduct = (targetProduct) => {
                var _a;
                let products = (_a = this._projectModel) === null || _a === void 0 ? void 0 : _a.getTargetApplyProducts(this._moduleModel.getName(), targetName);
                // 如果没有配置applyToProducts则默认是default
                if (products === undefined) {
                    products = ["default"];
                }
                return products.includes(targetProduct);
            };
            return checkApplyProduct(targetProduct.name) && needPack;
        };
        /**
         * 初始化hap模块打包流的target数据集合
         */
        this.initTargetData = () => {
            const curModuleConfigTargets = this.computeTargets();
            let buildRoot = hvigor_base_1.vigorConfigInst.getExtraConfig().get("buildRoot");
            if (!buildRoot) {
                buildRoot = build_directory_const_js_1.BuildDirConst.BUILD_ROOT;
            }
            let targets = this._moduleModel.getProfileOpt().targets;
            if (targets === undefined) {
                targets = [{
                        name: "default",
                    }, {
                        name: "ohosTest"
                    }];
            }
            else {
                const targetNames = targets.map(target => {
                    return target.name;
                });
                if (!targetNames.includes("default")) {
                    targets.push({
                        name: "default",
                    });
                }
                if (!targetNames.includes("ohosTest")) {
                    targets.push({
                        name: "ohosTest"
                    });
                }
            }
            const targetProduct = (0, find_target_product_1.findTargetProduct)(this._projectModel);
            let hasTargetNeedPack = false;
            targets.forEach((target) => {
                const targetName = target.name;
                const needPack = this.checkNeedPack(targetProduct, targetName, curModuleConfigTargets);
                if (needPack) {
                    hasTargetNeedPack = true;
                }
                const pathInfo = new module_path_info_iml_1.ModulePathInfoIml(this._moduleModel, targetName, targetProduct.name, buildRoot);
                this._targetDataMap.set(targetName, [new hap_task_target_data_1.ModuleTargetData(this._moduleModel, targetName, pathInfo, targetProduct), needPack]);
            });
            if (!hasTargetNeedPack) {
                this._log._buildError(`Current product is ${targetProduct.name},There is no executable target!`)
                    ._solution(`Please check the module targets ${util.format(targets)} applyToProducts field`)
                    ._file(this._projectModel.getProfilePath())
                    ._printErrorAndExit(this._moduleModel.getName());
            }
        };
        this._moduleModel = moduleModel;
        this._targetDataMap = new Map();
        this._hapExtraInfo = project_extra_info_service_js_1.ProjectExtraInfoService.getProjectExtraInfoByPath(this._moduleModel);
        this._compileSdkVersion = this._projectModel.getProfileOpt().app.compileSdkVersion;
        this._sdkInfo = new sdk_info_1.SdkInfo(this._compileSdkVersion, this.getModuleRequiredSDKs());
        this.initTargetData();
    }
    getModuleRequiredSDKs() {
        // always require Toolchains
        const sdkComponents = [sdkmanager_common_1.ComponentPath.TOOLCHAINS];
        for (const key of this._moduleModel.getSourceSetByTargetName(common_const_js_1.DefaultTargetConst.DEFAULT_TARGET).getCodeMap().keys()) {
            // 当前先按照目录存在就加载
            if (code_type_enum_1.CodeType.CPP === key) {
                if (this._moduleModel.getProfileOpt().buildOption.externalNativeOptions) {
                    sdkComponents.push(code_type_enum_1.CodeType.getSDKComponentName(key));
                }
            }
            else {
                sdkComponents.push(code_type_enum_1.CodeType.getSDKComponentName(key));
            }
        }
        this._log.debug(`${this._moduleModel.getName()} require SDK: ${sdkComponents.join(" ").toLowerCase()}`);
        return sdkComponents;
    }
    getModuleModel() {
        return this._moduleModel;
    }
    getTargetDataMap() {
        return this._targetDataMap;
    }
    getHapExtraInfo() {
        return this._hapExtraInfo;
    }
    isArkModule() {
        return this._moduleModel.isArkModule();
    }
}
exports.ModuleTaskService = ModuleTaskService;
//# sourceMappingURL=module-task-service.js.map