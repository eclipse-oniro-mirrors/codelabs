"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectTaskService = void 0;
const task_service_1 = require("./task-service");
const hap_plugin_1 = require("../../plugin/hap-plugin");
const array_util_1 = require("../../utils/array-util");
const find_target_product_1 = require("../../common/find-target-product");
const build_directory_const_1 = require("../../const/build-directory-const");
const project_path_info_iml_1 = require("../../common/iml/project-path-info-iml");
const sdk_info_js_1 = require("../../sdk/sdk-info.js");
const sdkmanager_common_1 = require("@ohos/sdkmanager-common");
/**
 * 基于持久化project的模型层提供的数据，经过处理后,提供给打包app任务流需要使用的服务和数据
 *
 * @since 2022/1/20
 */
class ProjectTaskService extends task_service_1.TaskService {
    constructor(project, projectModel) {
        super(projectModel);
        /**
         * 初始化app模块打包流的product数据集合
         */
        this.initProductData = () => {
            var _a;
            (_a = this._project) === null || _a === void 0 ? void 0 : _a.getSubProjects().forEach((value) => {
                var _a;
                const moduleName = value.getName();
                const plugin = value.getPlugin();
                if (plugin === undefined) {
                    throw new Error(`Cannot find build file 'hvigorfile.js' in module ${moduleName}`);
                }
                const moduleTargetDataArr = [];
                if (plugin instanceof hap_plugin_1.HapPlugin) {
                    // 需要获取在根项目下的build-profile里配了哪些target,没配置的就不需要打包
                    const appModuleOpt = (_a = this._projectModel) === null || _a === void 0 ? void 0 : _a.getModuleProfileOpt(moduleName);
                    const appModuleConfigTargets = appModuleOpt === null || appModuleOpt === void 0 ? void 0 : appModuleOpt.targets;
                    const targetDataMap = plugin.getTaskService().getTargetDataMap();
                    targetDataMap.forEach((targetData, targetName, targetMap) => {
                        // 该target需要打包，并且在根项目下的build-profile中配置了
                        if (targetData[1] && (0, array_util_1.getElementFromArr)(appModuleConfigTargets, targetName) !== undefined) {
                            moduleTargetDataArr.push(targetData[0]);
                        }
                    });
                    this._productDataMap.set(moduleName, moduleTargetDataArr);
                }
            });
        };
        this._project = project;
        this._targetProduct = (0, find_target_product_1.findTargetProduct)(projectModel);
        this._sdkInfo = new sdk_info_js_1.SdkInfo(projectModel.getCompileApiVersion(), [sdkmanager_common_1.ComponentPath.TOOLCHAINS]);
        this._pathInfo = new project_path_info_iml_1.ProjectPathInfoIml(projectModel, this._targetProduct.name);
        this._productDataMap = new Map();
        this.initProductData();
    }
    getProductDataMap() {
        return this._productDataMap;
    }
    getPathInfo() {
        return this._pathInfo;
    }
    getTargetProduct() {
        return this._targetProduct;
    }
    getAppOutputFileName(isSigned = false) {
        const signedSuffix = isSigned ? "signed" : "unsigned";
        const projectName = this._projectModel.getName();
        return `${projectName}-${this._targetProduct.name}-${signedSuffix}${build_directory_const_1.BuildArtifactExtension.DOT_APP}`;
    }
}
exports.ProjectTaskService = ProjectTaskService;
//# sourceMappingURL=project-task-service.js.map