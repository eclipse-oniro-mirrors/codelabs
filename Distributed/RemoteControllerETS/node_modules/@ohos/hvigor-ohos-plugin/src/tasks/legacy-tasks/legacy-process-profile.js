"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegacyProcessProfile = void 0;
const fs = __importStar(require("fs-extra"));
const ohos_hap_task_js_1 = require("../task/ohos-hap-task.js");
const project_file_reader_js_1 = require("../../utils/project-file-reader.js");
/**
 * 处理config.json
 *
 * @since 2022/1/10
 */
class LegacyProcessProfile extends ohos_hap_task_js_1.OhosHapTask {
    constructor(taskService) {
        super(taskService, "LegacyProcessProfile");
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    doTaskAction(moduleTargetData, target) {
        const pathInfo = moduleTargetData.getPathInfo();
        const mergedConfigOpt = project_file_reader_js_1.ProjectFileReader.getJson5Obj(pathInfo.getIntermediatesMergeLegacyProfile());
        const processedModuleJson = pathInfo.getIntermediatesProcessLegacyProfile();
        if (this.service.isArkModule()) {
            const distroObj = mergedConfigOpt.module.distro;
            if (distroObj != undefined) {
                mergedConfigOpt.module.distro.virtualMachine = `ark${this.service.getSdkInfo().getJsArkVersion()}`;
            }
            fs.outputJSONSync(processedModuleJson, mergedConfigOpt);
        }
        else {
            fs.outputJSONSync(processedModuleJson, mergedConfigOpt);
        }
    }
}
exports.LegacyProcessProfile = LegacyProcessProfile;
//# sourceMappingURL=legacy-process-profile.js.map