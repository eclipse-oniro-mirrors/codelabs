"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegacyCompileNode = void 0;
const code_type_enum_js_1 = require("../../enum/code-type-enum.js");
const build_directory_const_js_1 = require("../../const/build-directory-const.js");
const compile_node_js_1 = require("../compile-node.js");
const path_1 = __importDefault(require("path"));
const node_util_js_1 = require("../../utils/node-util.js");
const ohos_logger_js_1 = require("../../utils/log/ohos-logger.js");
const fse = __importStar(require("fs-extra"));
/**
 * 调用loader编译老模型的js/ets源码
 *
 * @since 2022/1/20
 */
class LegacyCompileNode extends compile_node_js_1.CompileNode {
    constructor(taskService, codeType) {
        super(taskService, codeType);
        this._logger = ohos_logger_js_1.OhosLogger.getLogger(LegacyCompileNode.name);
    }
    doTaskAction(targetData, target) {
        const moduleModel = this.service.getModuleModel();
        const codeModel = moduleModel.getSourceSetByTargetName(target).getCodeMap().get(this.codeType);
        if (codeModel === undefined) {
            this._logger.debug(`Cannot find '${this.codeType}' source.`);
            return;
        }
        // input
        const aceModuleRoot = codeModel.getSrcPath();
        const pathInfo = targetData.getPathInfo();
        // 依赖资源编译
        const resourceTxt = path_1.default.resolve(pathInfo.getIntermediatesRes(), build_directory_const_js_1.BuildArtifactConst.RESOURCE_TABLE_TXT);
        // 依赖manifest.json的生成
        const aceManifestPath = path_1.default.resolve(pathInfo.getIntermediatesLegacyManifestJson());
        // output 老模型中, 不管源码是ets还是js, 都输出到js目录下
        const aceModuleBuild = path_1.default.resolve(targetData.getPathInfo().getIntermediatesAssetsPath(), code_type_enum_js_1.CodeType.JS);
        // nodejs path
        const nodeJsDir = (0, node_util_js_1.findValidNodeDir)(this.sdkInfo.getNodeJsDir());
        const loader = this.codeType === code_type_enum_js_1.CodeType.ETS ?
            this.sdkInfo.getEtsLoader() : this.sdkInfo.getJsLoader();
        const abilityObjs = moduleModel.getLegacyAbilities(target);
        for (let i = 0; i < abilityObjs.length; i++) {
            const abilityInfo = abilityObjs[i];
            if (abilityInfo.getSrcLanguage() !== this.codeType) {
                continue;
            }
            let cmdEnv = Object.assign(Object.assign({}, this.commonOption), { 'abilityType': abilityInfo.getType(), 'aceManifestPath': path_1.default.resolve(aceManifestPath, abilityInfo.getRelateSrcPath(), build_directory_const_js_1.BuildArtifactConst.LEGACY_MANIFEST_JSON), 'appResource': resourceTxt, 'aceModuleRoot': path_1.default.resolve(aceModuleRoot, abilityInfo.getRelateSrcPath()), 'aceModuleBuild': path_1.default.resolve(aceModuleBuild, abilityInfo.getRelateSrcPath()), 'cachePath': this.getTaskTempDir(targetData), 'aceSuperVisualPath': path_1.default.resolve(moduleModel.getSourceRootByTargetName(target), 'supervisual', abilityInfo.getRelateSrcPath()) });
            const aceLoaderJson = path_1.default.resolve(pathInfo.getIntermediatesLoaderPath(), 'loader.json');
            cmdEnv = fse.existsSync(aceLoaderJson) ? Object.assign(Object.assign({}, cmdEnv), { aceBuildJson: aceLoaderJson }) : cmdEnv;
            this.doRealLoaderCompile(nodeJsDir, loader, cmdEnv);
            this.moveReleaseMap(targetData, abilityInfo.getRelateSrcPath());
        }
    }
}
exports.LegacyCompileNode = LegacyCompileNode;
//# sourceMappingURL=legacy-compile-node.js.map