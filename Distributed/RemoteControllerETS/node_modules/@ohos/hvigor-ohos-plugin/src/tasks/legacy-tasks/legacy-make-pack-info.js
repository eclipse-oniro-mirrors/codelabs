"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegacyMakePackInfo = void 0;
const ohos_hap_task_js_1 = require("../task/ohos-hap-task.js");
const build_directory_const_js_1 = require("../../const/build-directory-const.js");
const fse = __importStar(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const ohos_logger_js_1 = require("../../utils/log/ohos-logger.js");
/**
 * 生成老模型hap级别的pack.info
 */
class LegacyMakePackInfo extends ohos_hap_task_js_1.OhosHapTask {
    constructor(taskService) {
        super(taskService, "MakePackInfo");
        this._log = ohos_logger_js_1.OhosLogger.getLogger(LegacyMakePackInfo.name);
    }
    doTaskAction(targetData, target) {
        const moduleModel = this.service.getModuleModel();
        const configObj = moduleModel.getJsonObjByTargetName(target);
        const appObj = {
            bundleName: configObj.app.bundleName,
            version: configObj.app.version
        };
        const moduleObj = {
            mainAbility: configObj.module.mainAbility,
            deviceType: configObj.module.deviceType,
            abilities: LegacyMakePackInfo.processAbilities(configObj.module.abilities),
            distro: configObj.module.distro,
            apiVersion: configObj.app.apiVersion
        };
        const fullHapName = targetData.getModuleTargetOutputFileName();
        const noSuffixHapName = fullHapName.substring(0, fullHapName.lastIndexOf(".hap"));
        const packageObj = {
            deviceType: configObj.module.deviceType,
            moduleType: configObj.module.distro.moduleType,
            deliveryWithInstall: configObj.module.distro.deliveryWithInstall,
            name: noSuffixHapName
        };
        const packInfo = {
            summary: {
                app: appObj,
                modules: [moduleObj]
            },
            packages: [packageObj] // 因为是hap级别的pack.info,所以数组只有一个对象
        };
        this._log.debug("Module Pack Info: ", packInfo);
        fse.outputJSONSync(path_1.default.resolve(targetData.getPathInfo().getModuleBuildOutputPath(), build_directory_const_js_1.BuildArtifactConst.PACK_INFO), packInfo);
    }
    static processAbilities(abilitiesObj) {
        const processedAbilities = [];
        for (let i = 0; i < abilitiesObj.length; i++) {
            const orgAbilityObj = abilitiesObj[i];
            const abilityObj = {
                name: orgAbilityObj.name,
                label: orgAbilityObj.label,
                visible: orgAbilityObj.visible
            };
            processedAbilities.push(abilityObj);
        }
        return processedAbilities;
    }
}
exports.LegacyMakePackInfo = LegacyMakePackInfo;
//# sourceMappingURL=legacy-make-pack-info.js.map