"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 *
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompileNative = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const native_command_builder_js_1 = require("../builder/native-command-builder.js");
const process_utils_js_1 = require("../utils/process-utils.js");
const ohos_hap_task_js_1 = require("./task/ohos-hap-task.js");
const code_type_enum_js_1 = require("../enum/code-type-enum.js");
const ohos_logger_js_1 = require("../utils/log/ohos-logger.js");
/**
 * ohos native代码编译任务
 *
 * @since 2021/1/21
 */
class CompileNative extends ohos_hap_task_js_1.OhosHapTask {
    constructor(taskService) {
        super(taskService, "CompileNative");
        this._log = ohos_logger_js_1.OhosLogger.getLogger(CompileNative.name);
        this._moduleDir = this.moduleModel.getProjectDir();
        const profileOption = this.moduleModel.getProfileOpt();
        this._nativeOption = profileOption.buildOption.externalNativeOptions;
    }
    taskShouldDo(targetData) {
        return this.moduleModel
            .getSourceSetByTargetName(targetData.getTargetName())
            .getCodeMap()
            .has(code_type_enum_js_1.CodeType.CPP)
            && this._nativeOption !== undefined;
    }
    doTaskAction(targetData, target) {
        var _a;
        const pathInfo = targetData.getPathInfo();
        (_a = this._nativeOption.abiFilters) === null || _a === void 0 ? void 0 : _a.forEach(abiFilter => {
            this.buildCommand(abiFilter, target, pathInfo);
        });
    }
    buildCommand(abiFilter, target, pathInfo) {
        const builder = new native_command_builder_js_1.NativeCommandBuilder(this.sdkInfo.getCmakeTool());
        const args = this.getArguments();
        if (0 !== args.length) {
            builder.addAllParams(args);
        }
        // TODO 暂时方案, 确定目录结构后修改
        const outputDir = path_1.default.resolve(pathInfo.getModuleBuildIntermediates(), 'cmake', target, 'obj', abiFilter);
        const tempDir = path_1.default.resolve(pathInfo.getCppOutputDir(), 'default', 'default', abiFilter);
        this.checkDir(outputDir);
        this.cleanCache(tempDir);
        builder.addCmakeList(this.getCmakeListDir())
            .addTempFilePath(tempDir)
            .addOhosArch(abiFilter)
            .addOutputDir(outputDir)
            .addBuildType('normal')
            .addNativeSdk(this.sdkInfo.getSdkNativeDir())
            .addSystemName('OHOS')
            .addOhosArchAbi(abiFilter)
            .exportCompileCommands('ON')
            .addToolChain(this.sdkInfo.getNativeToolchain())
            .addGenerator('Ninja')
            .addMakeProgramPath(this.sdkInfo.getNativeNinjaTool());
        if (this._nativeOption.cFlags) {
            builder.addCFlags(this._nativeOption.cFlags);
        }
        if (this._nativeOption.cppFlags && '' !== this._nativeOption.cppFlags) {
            builder.addCxxFlags(this._nativeOption.cppFlags);
        }
        const commands = builder.build();
        this._log._printDebugCommand("Ninja", commands);
        new process_utils_js_1.ProcessUtils(this.moduleName, this.taskName).executeSync(commands);
    }
    getCmakeListDir() {
        return path_1.default.resolve(this._moduleDir, this._nativeOption.path, '..');
    }
    getArguments() {
        const argument = this._nativeOption.arguments;
        if (argument && '' !== argument) {
            return argument.split(' ');
        }
        return [];
    }
    checkDir(dir) {
        try {
            const stat = fs_extra_1.default.statSync(path_1.default.resolve(dir));
            if (stat && stat.isDirectory()) {
                fs_extra_1.default.removeSync(path_1.default.resolve(dir));
            }
            fs_extra_1.default.mkdirSync(path_1.default.resolve(dir), { recursive: true });
        }
        catch (e) {
            fs_extra_1.default.mkdirSync(path_1.default.resolve(dir), { recursive: true });
        }
    }
    cleanCache(tempDir) {
        const cacheFile = path_1.default.resolve(tempDir, 'CMakeCache.txt');
        fs_extra_1.default.removeSync(cacheFile);
    }
}
exports.CompileNative = CompileNative;
//# sourceMappingURL=compile-native.js.map