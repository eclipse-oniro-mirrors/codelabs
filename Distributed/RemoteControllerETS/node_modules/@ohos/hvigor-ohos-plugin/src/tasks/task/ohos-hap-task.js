"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OhosHapTask = void 0;
const ohos_task_js_1 = require("./ohos-task.js");
const fse = __importStar(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const pretty_hrtime_1 = __importDefault(require("pretty-hrtime"));
const ohos_logger_js_1 = require("../../utils/log/ohos-logger.js");
/**
 * openHarmony基础hap 的task
 *
 * @since 2022/1/5
 */
class OhosHapTask extends ohos_task_js_1.DefaultOhosTask {
    constructor(taskService, taskName) {
        super(taskService, taskName);
        this._logHap = ohos_logger_js_1.OhosLogger.getLogger('HapTask');
        this.registry = () => {
            return (cb) => {
                const taskBeginTime = process.hrtime();
                this.targetDataMap.forEach((value, targetName) => {
                    const targetData = value[0];
                    const taskShouldDo = value[1] && this.taskShouldDo(targetData);
                    if (!taskShouldDo) {
                        return;
                    }
                    this.beforeTask(targetData);
                    this.doTaskAction(targetData, targetName);
                });
                const taskEndTime = process.hrtime(taskBeginTime);
                const realTime = (0, pretty_hrtime_1.default)(taskEndTime);
                this._logHap._printTaskInfo(this.moduleModel.getName(), this.taskName, realTime);
                cb();
            };
        };
        this.service = taskService;
        this.targetDataMap = this.service.getTargetDataMap();
        this.moduleModel = this.service.getModuleModel();
        this.sdkInfo = this.service.getSdkInfo();
        this.moduleName = this.moduleModel.getName();
    }
    /**
     * 在task执行之前做hook, 通常用于clean上次构建的输出
     *
     * @param targetData target数据模型
     */
    // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars
    beforeTask(targetData) {
    }
    /**
     * 根据targetData状态判断是否跳过该task
     *
     * @param targetData target数据模型
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    taskShouldDo(targetData) {
        return true;
    }
    /**
     * 获取每个target的临时目录(缓存目录)
     * 调该方法时如果该目录不存在，则创建新目录
     *
     * @param targetData
     */
    getTaskTempDir(targetData) {
        const tempDir = path_1.default.resolve(targetData.getPathInfo().getModuleBuildCachePath(), this.taskName);
        if (!fse.existsSync(tempDir)) {
            fse.mkdirsSync(tempDir);
        }
        return tempDir;
    }
}
exports.OhosHapTask = OhosHapTask;
//# sourceMappingURL=ohos-hap-task.js.map