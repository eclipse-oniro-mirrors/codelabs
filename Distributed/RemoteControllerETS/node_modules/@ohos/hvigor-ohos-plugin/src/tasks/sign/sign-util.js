"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignUtil = void 0;
const sign_model_1 = require("./command-builder-impl/sign-model");
const process_utils_1 = require("../../utils/process-utils");
const array_util_1 = require("../../utils/array-util");
const sign_command_factory_1 = require("./command-builder-impl/sign-command-factory");
const ohos_logger_js_1 = require("../../utils/log/ohos-logger.js");
const module_task_service_1 = require("../service/module-task-service");
const validate_util_1 = require("../../utils/validate-util");
/**
 * 执行签名的工具类
 *
 * @since 2022/1/21
 */
class SignUtil {
    constructor(taskService, moduleType, targetProduct) {
        this._log = ohos_logger_js_1.OhosLogger.getLogger(SignUtil.name);
        this._taskService = taskService;
        this._moduleType = moduleType;
        this._targetProduct = targetProduct;
        this._signCommandFactory = new sign_command_factory_1.SignCommandFactory(this._taskService.getProjectModel().getCompileApiVersion());
    }
    sign(inputFilePath, outputFilePath) {
        this.executeSign(new sign_model_1.SignModel(this._moduleType, inputFilePath, outputFilePath));
    }
    executeSign(signModel) {
        const app = this._taskService.getProjectModel().getProfileOpt().app;
        const productSignConfigName = this._targetProduct.signingConfig;
        const signingConfig = (0, array_util_1.getElementFromArr)(app === null || app === void 0 ? void 0 : app.signingConfigs, productSignConfigName === null || productSignConfigName === void 0 ? void 0 : productSignConfigName.substring(productSignConfigName.lastIndexOf(".") + 1));
        if (signingConfig === undefined) {
            this._log.warn(`Will skip sign '${this._moduleType}',
            because no valid signingConfig is configured for '${this._targetProduct.name}' product`);
            return;
        }
        const sdkInfo = this._taskService.getSdkInfo();
        const commandBuilder = this._signCommandFactory.createCommandBuilder(this._taskService.getProjectModel(), signingConfig, sdkInfo, signModel);
        const signCommand = commandBuilder.getSignCommand();
        if (this._moduleType === "hap") {
            const bundleNameFromP7b = validate_util_1.ValidateUtil.getBundleNameFromP7b(this._taskService, signingConfig);
            const bundleNameFromHap = validate_util_1.ValidateUtil.getBundleNameFromHap(this._taskService);
            if (bundleNameFromHap !== bundleNameFromP7b) {
                this._log._buildError('The bundle name verification result does not match.')
                    ._solution('Please check the current hap bundleName or the signature ' +
                    'configuration of the signingConfigs field in build-profile.json5 file is correct.')
                    ._file(this._taskService.getProjectModel().getProfilePath())
                    ._printErrorAndExit();
            }
        }
        if (this._taskService instanceof module_task_service_1.ModuleTaskService) {
            new process_utils_1.ProcessUtils(this._taskService.getModuleModel().getName(), `Sign${this._moduleType}`)
                .executeSync(signCommand);
        }
        else {
            new process_utils_1.ProcessUtils(this._taskService.getProjectModel().getName(), `Sign${this._moduleType}`)
                .executeSync(signCommand);
        }
    }
}
exports.SignUtil = SignUtil;
//# sourceMappingURL=sign-util.js.map