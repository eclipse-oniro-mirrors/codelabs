"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NativeCommandBuilder = void 0;
const base_command_builder_js_1 = require("./base-command-builder.js");
/**
 * ohos native代码编译命令行构造类
 *
 * @since 2022/1/21
 */
class NativeCommandBuilder extends base_command_builder_js_1.BaseCommandBuilder {
    constructor(executor) {
        super([]);
        this.commandList.push(executor);
    }
    addCmakeList(cmakeList) {
        this.commandList.push(`-H${cmakeList}`);
        return this;
    }
    addTempFilePath(tempFilePath) {
        this.commandList.push(`-B${tempFilePath}`);
        return this;
    }
    addOhosArch(arch) {
        this.commandList.push(`-DOHOS_ARCH=${arch}`);
        return this;
    }
    addOutputDir(outputDir) {
        this.commandList.push(`-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${outputDir}`);
        return this;
    }
    addBuildType(buildType) {
        this.commandList.push(`-DCMAKE_BUILD_TYPE=${buildType}`);
        return this;
    }
    addNativeSdk(nativeSdk) {
        this.commandList.push(`-DOHOS_SDK_NATIVE=${nativeSdk}`);
        return this;
    }
    addSystemName(systemName) {
        this.commandList.push(`-DCMAKE_SYSTEM_NAME=${systemName}`);
        return this;
    }
    addOhosArchAbi(archAbi) {
        this.commandList.push(`-DCMAKE_OHOS_ARCH_ABI=${archAbi}`);
        return this;
    }
    exportCompileCommands(exportCommand) {
        this.commandList.push(`-DCMAKE_EXPORT_COMPILE_COMMANDS=${exportCommand}`);
        return this;
    }
    addToolChain(toolchain) {
        this.commandList.push(`-DCMAKE_TOOLCHAIN_FILE=${toolchain}`);
        return this;
    }
    addGenerator(generator) {
        this.commandList.push("-G");
        this.commandList.push(generator);
        return this;
    }
    addMakeProgramPath(makeProgramPath) {
        this.commandList.push(`-DCMAKE_MAKE_PROGRAM=${makeProgramPath}`);
        return this;
    }
    addCFlags(cFlags) {
        this.commandList.push(`-DCMAKE_C_FLAGS=${cFlags}`);
        return this;
    }
    addCxxFlags(cppFlags) {
        this.commandList.push(`-DCMAKE_CXX_FLAGS=${cppFlags}`);
        return this;
    }
    changeToDir(dir) {
        this.commandList.push('-C');
        this.commandList.push(dir);
        return this;
    }
}
exports.NativeCommandBuilder = NativeCommandBuilder;
//# sourceMappingURL=native-command-builder.js.map