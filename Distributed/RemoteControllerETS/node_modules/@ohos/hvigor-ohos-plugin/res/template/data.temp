package PACKAGE_NAME;

import ohos.aafwk.ability.AceDataAbility;

public class ABILITY_NAME extends AceDataAbility {

    @Override
    public void onStart(Intent intent) {
        super.onStart(intent);
    }

    @Override
    protected void onInitialized(AbilityInfo abilityInfo) {
        setInstanceName("ABILITY_SRC_PATH");
        super.onInitialized(abilityInfo);
    }

    @Override
    public void onStop() {
        super.onStop();
    }

    @Override
    public Uri normalizeUri(Uri uri) {
        super.normalizeUri(uri);
        return null;
    }

    @Override
    public Uri denormalizeUri(Uri uri) {
        super.denormalizeUri(uri);
        return null;
    }

    @Override
    public String getType(Uri uri) {
        super.getType(uri);
        return null;
    }

    @Override
    public String[] getFileTypes(Uri uri, String mimeTypeFilter) {
        super.getFileTypes(uri, mimeTypeFilter);
        return null;
    }

    @Override
    public FileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {
        super.openFile(uri, mode);
        return null;
    }

    @Override
    public PacMap call(String method, String arg, PacMap extras) {
        super.call(method, arg, extras);
        return null;
    }

    @Override
    public int delete(Uri uri, DataAbilityPredicates predicates) {
        super.delete(uri, predicates);
        return -1;
    }

    @Override
    public int update(Uri uri, ValuesBucket value, DataAbilityPredicates predicates) {
        super.update(uri, value, predicates);
        return -1;
    }

    @Override
    public int insert(Uri uri, ValuesBucket value) {
        super.insert(uri, value);
        return -1;
    }

    @Override
    public int batchInsert(Uri uri, ValuesBucket[] values) {
        super.batchInsert(uri, values);
        return -1;
    }

    @Override
    public ResultSet query(Uri uri, String[] columns, DataAbilityPredicates predicates) {
         super.query(uri, columns, predicates);
         return null;
    }

    @Override
    public DataAbilityResult[] executeBatch(ArrayList<DataAbilityOperation> operations)
        throws OperationExecuteException {
        super.executeBatch(operations);
        return null;
    }
}
